=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module MailSlurpClient
  class MFAControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a TOTP device from custom options
    # Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
    # @param create_totp_device_otp_auth_url_options [CreateTotpDeviceOtpAuthUrlOptions] 
    # @param [Hash] opts the optional parameters
    # @return [TotpDeviceDto]
    def create_totp_device_for_custom(create_totp_device_otp_auth_url_options, opts = {})
      data, _status_code, _headers = create_totp_device_for_custom_with_http_info(create_totp_device_otp_auth_url_options, opts)
      data
    end

    # Create a TOTP device from custom options
    # Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
    # @param create_totp_device_otp_auth_url_options [CreateTotpDeviceOtpAuthUrlOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TotpDeviceDto, Integer, Hash)>] TotpDeviceDto data, response status code and response headers
    def create_totp_device_for_custom_with_http_info(create_totp_device_otp_auth_url_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MFAControllerApi.create_totp_device_for_custom ...'
      end
      # verify the required parameter 'create_totp_device_otp_auth_url_options' is set
      if @api_client.config.client_side_validation && create_totp_device_otp_auth_url_options.nil?
        fail ArgumentError, "Missing the required parameter 'create_totp_device_otp_auth_url_options' when calling MFAControllerApi.create_totp_device_for_custom"
      end
      # resource path
      local_var_path = '/mfa/totp/device/custom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_totp_device_otp_auth_url_options) 

      # return_type
      return_type = opts[:return_type] || 'TotpDeviceDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MFAControllerApi#create_totp_device_for_custom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a TOTP device from an OTP Auth URL
    # Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret=ABC123&issuer=MyApp&period=30&digits=6&algorithm=SHA1. You can provider overrides in the options for each component of the URL.
    # @param create_totp_device_otp_auth_url_options [CreateTotpDeviceOtpAuthUrlOptions] 
    # @param [Hash] opts the optional parameters
    # @return [TotpDeviceDto]
    def create_totp_device_for_otp_auth_url(create_totp_device_otp_auth_url_options, opts = {})
      data, _status_code, _headers = create_totp_device_for_otp_auth_url_with_http_info(create_totp_device_otp_auth_url_options, opts)
      data
    end

    # Create a TOTP device from an OTP Auth URL
    # Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
    # @param create_totp_device_otp_auth_url_options [CreateTotpDeviceOtpAuthUrlOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TotpDeviceDto, Integer, Hash)>] TotpDeviceDto data, response status code and response headers
    def create_totp_device_for_otp_auth_url_with_http_info(create_totp_device_otp_auth_url_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MFAControllerApi.create_totp_device_for_otp_auth_url ...'
      end
      # verify the required parameter 'create_totp_device_otp_auth_url_options' is set
      if @api_client.config.client_side_validation && create_totp_device_otp_auth_url_options.nil?
        fail ArgumentError, "Missing the required parameter 'create_totp_device_otp_auth_url_options' when calling MFAControllerApi.create_totp_device_for_otp_auth_url"
      end
      # resource path
      local_var_path = '/mfa/totp/device/otpAuthUrl'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_totp_device_otp_auth_url_options) 

      # return_type
      return_type = opts[:return_type] || 'TotpDeviceDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MFAControllerApi#create_totp_device_for_otp_auth_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a TOTP device by ID
    # Get Time-Based One-Time Password (TOTP) device by its ID.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TotpDeviceDto]
    def get_totp_device(id, opts = {})
      data, _status_code, _headers = get_totp_device_with_http_info(id, opts)
      data
    end

    # Get a TOTP device by ID
    # Get Time-Based One-Time Password (TOTP) device by its ID.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TotpDeviceDto, Integer, Hash)>] TotpDeviceDto data, response status code and response headers
    def get_totp_device_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MFAControllerApi.get_totp_device ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MFAControllerApi.get_totp_device"
      end
      # resource path
      local_var_path = '/mfa/totp/device/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TotpDeviceDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MFAControllerApi#get_totp_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a TOTP device by username, issuer, or name. Returns empty if not found.
    # Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Optional name filter
    # @option opts [String] :issuer Optional issuer filter
    # @option opts [String] :username Optional username filter
    # @return [TotpDeviceOptionalDto]
    def get_totp_device_by(opts = {})
      data, _status_code, _headers = get_totp_device_by_with_http_info(opts)
      data
    end

    # Get a TOTP device by username, issuer, or name. Returns empty if not found.
    # Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Optional name filter
    # @option opts [String] :issuer Optional issuer filter
    # @option opts [String] :username Optional username filter
    # @return [Array<(TotpDeviceOptionalDto, Integer, Hash)>] TotpDeviceOptionalDto data, response status code and response headers
    def get_totp_device_by_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MFAControllerApi.get_totp_device_by ...'
      end
      # resource path
      local_var_path = '/mfa/totp/device/by'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'issuer'] = opts[:'issuer'] if !opts[:'issuer'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TotpDeviceOptionalDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MFAControllerApi#get_totp_device_by\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a TOTP device code by device ID
    # Get Time-Based One-Time Password for a device by its ID.
    # @param id [String] ID of the TOTP device to get the code for
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :at Optional time to get code for. If not provided, current time is used.
    # @option opts [Integer] :min_seconds_until_expire Optional minimum time until code expires. Will hold thread open until period reached. (default to 5)
    # @return [TotpDeviceCodeDto]
    def get_totp_device_code(id, opts = {})
      data, _status_code, _headers = get_totp_device_code_with_http_info(id, opts)
      data
    end

    # Get a TOTP device code by device ID
    # Get Time-Based One-Time Password for a device by its ID.
    # @param id [String] ID of the TOTP device to get the code for
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :at Optional time to get code for. If not provided, current time is used.
    # @option opts [Integer] :min_seconds_until_expire Optional minimum time until code expires. Will hold thread open until period reached.
    # @return [Array<(TotpDeviceCodeDto, Integer, Hash)>] TotpDeviceCodeDto data, response status code and response headers
    def get_totp_device_code_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MFAControllerApi.get_totp_device_code ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MFAControllerApi.get_totp_device_code"
      end
      if @api_client.config.client_side_validation && !opts[:'min_seconds_until_expire'].nil? && opts[:'min_seconds_until_expire'] > 30
        fail ArgumentError, 'invalid value for "opts[:"min_seconds_until_expire"]" when calling MFAControllerApi.get_totp_device_code, must be smaller than or equal to 30.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_seconds_until_expire'].nil? && opts[:'min_seconds_until_expire'] < 1
        fail ArgumentError, 'invalid value for "opts[:"min_seconds_until_expire"]" when calling MFAControllerApi.get_totp_device_code, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/mfa/totp/device/{id}/code'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?
      query_params[:'minSecondsUntilExpire'] = opts[:'min_seconds_until_expire'] if !opts[:'min_seconds_until_expire'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TotpDeviceCodeDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MFAControllerApi#get_totp_device_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
