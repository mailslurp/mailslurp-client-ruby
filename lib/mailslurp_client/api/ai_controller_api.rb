=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module MailSlurpClient
  class AIControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List transformers
    # List all AI transforms
    # @param options [AITranformCreateOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @return [PageAITransformProjection]
    def create_transformer(options, opts = {})
      data, _status_code, _headers = create_transformer_with_http_info(options, opts)
      data
    end

    # List transformers
    # List all AI transforms
    # @param options [AITranformCreateOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @return [Array<(PageAITransformProjection, Integer, Hash)>] PageAITransformProjection data, response status code and response headers
    def create_transformer_with_http_info(options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.create_transformer ...'
      end
      # verify the required parameter 'options' is set
      if @api_client.config.client_side_validation && options.nil?
        fail ArgumentError, "Missing the required parameter 'options' when calling AIControllerApi.create_transformer"
      end
      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling AIControllerApi.create_transformer, must be smaller than or equal to 100.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/ai/transformer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'options'] = options
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageAITransformProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#create_transformer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a transformer for reuse in automations
    # Save an AI transform instructions and schema for use with webhooks and automations
    # @param ai_tranform_create_options [AITranformCreateOptions] 
    # @param [Hash] opts the optional parameters
    # @return [AITransformDto]
    def create_transformer1(ai_tranform_create_options, opts = {})
      data, _status_code, _headers = create_transformer1_with_http_info(ai_tranform_create_options, opts)
      data
    end

    # Create a transformer for reuse in automations
    # Save an AI transform instructions and schema for use with webhooks and automations
    # @param ai_tranform_create_options [AITranformCreateOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AITransformDto, Integer, Hash)>] AITransformDto data, response status code and response headers
    def create_transformer1_with_http_info(ai_tranform_create_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.create_transformer1 ...'
      end
      # verify the required parameter 'ai_tranform_create_options' is set
      if @api_client.config.client_side_validation && ai_tranform_create_options.nil?
        fail ArgumentError, "Missing the required parameter 'ai_tranform_create_options' when calling AIControllerApi.create_transformer1"
      end
      # resource path
      local_var_path = '/ai/transformer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(ai_tranform_create_options) 

      # return_type
      return_type = opts[:return_type] || 'AITransformDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#create_transformer1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create transformer mapping
    # Create AI transformer mappings to other entities
    # @param create_ai_transformer_mapping_options [CreateAITransformerMappingOptions] 
    # @param [Hash] opts the optional parameters
    # @return [AITransformMappingDto]
    def create_transformer_mappings(create_ai_transformer_mapping_options, opts = {})
      data, _status_code, _headers = create_transformer_mappings_with_http_info(create_ai_transformer_mapping_options, opts)
      data
    end

    # Create transformer mapping
    # Create AI transformer mappings to other entities
    # @param create_ai_transformer_mapping_options [CreateAITransformerMappingOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AITransformMappingDto, Integer, Hash)>] AITransformMappingDto data, response status code and response headers
    def create_transformer_mappings_with_http_info(create_ai_transformer_mapping_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.create_transformer_mappings ...'
      end
      # verify the required parameter 'create_ai_transformer_mapping_options' is set
      if @api_client.config.client_side_validation && create_ai_transformer_mapping_options.nil?
        fail ArgumentError, "Missing the required parameter 'create_ai_transformer_mapping_options' when calling AIControllerApi.create_transformer_mappings"
      end
      # resource path
      local_var_path = '/ai/transformer/mappings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_ai_transformer_mapping_options) 

      # return_type
      return_type = opts[:return_type] || 'AITransformMappingDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#create_transformer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a transformer
    # Delete an AI transformer and schemas by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transformer(id, opts = {})
      delete_transformer_with_http_info(id, opts)
      nil
    end

    # Delete a transformer
    # Delete an AI transformer and schemas by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_transformer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.delete_transformer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AIControllerApi.delete_transformer"
      end
      # resource path
      local_var_path = '/ai/transformer/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#delete_transformer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete transformer mapping
    # Delete an AI transformer mapping
    # @param id [String] ID of transform mapping
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transformer_mapping(id, opts = {})
      delete_transformer_mapping_with_http_info(id, opts)
      nil
    end

    # Delete transformer mapping
    # Delete an AI transformer mapping
    # @param id [String] ID of transform mapping
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_transformer_mapping_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.delete_transformer_mapping ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AIControllerApi.delete_transformer_mapping"
      end
      # resource path
      local_var_path = '/ai/transformer/mappings/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#delete_transformer_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all transformers
    # Delete all AI transformers and schemas
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transformers(opts = {})
      delete_transformers_with_http_info(opts)
      nil
    end

    # Delete all transformers
    # Delete all AI transformers and schemas
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_transformers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.delete_transformers ...'
      end
      # resource path
      local_var_path = '/ai/transformer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#delete_transformers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate structured content for an attachment
    # Use output schemas to extract data from an attachment using AI
    # @param generate_structured_content_attachment_options [GenerateStructuredContentAttachmentOptions] 
    # @param [Hash] opts the optional parameters
    # @return [StructuredContentResultDto]
    def generate_structured_content_from_attachment(generate_structured_content_attachment_options, opts = {})
      data, _status_code, _headers = generate_structured_content_from_attachment_with_http_info(generate_structured_content_attachment_options, opts)
      data
    end

    # Generate structured content for an attachment
    # Use output schemas to extract data from an attachment using AI
    # @param generate_structured_content_attachment_options [GenerateStructuredContentAttachmentOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StructuredContentResultDto, Integer, Hash)>] StructuredContentResultDto data, response status code and response headers
    def generate_structured_content_from_attachment_with_http_info(generate_structured_content_attachment_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.generate_structured_content_from_attachment ...'
      end
      # verify the required parameter 'generate_structured_content_attachment_options' is set
      if @api_client.config.client_side_validation && generate_structured_content_attachment_options.nil?
        fail ArgumentError, "Missing the required parameter 'generate_structured_content_attachment_options' when calling AIControllerApi.generate_structured_content_from_attachment"
      end
      # resource path
      local_var_path = '/ai/structured-content/attachment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(generate_structured_content_attachment_options) 

      # return_type
      return_type = opts[:return_type] || 'StructuredContentResultDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#generate_structured_content_from_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate structured content for an email
    # Use output schemas to extract data from an email using AI
    # @param generate_structured_content_email_options [GenerateStructuredContentEmailOptions] 
    # @param [Hash] opts the optional parameters
    # @return [StructuredContentResultDto]
    def generate_structured_content_from_email(generate_structured_content_email_options, opts = {})
      data, _status_code, _headers = generate_structured_content_from_email_with_http_info(generate_structured_content_email_options, opts)
      data
    end

    # Generate structured content for an email
    # Use output schemas to extract data from an email using AI
    # @param generate_structured_content_email_options [GenerateStructuredContentEmailOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StructuredContentResultDto, Integer, Hash)>] StructuredContentResultDto data, response status code and response headers
    def generate_structured_content_from_email_with_http_info(generate_structured_content_email_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.generate_structured_content_from_email ...'
      end
      # verify the required parameter 'generate_structured_content_email_options' is set
      if @api_client.config.client_side_validation && generate_structured_content_email_options.nil?
        fail ArgumentError, "Missing the required parameter 'generate_structured_content_email_options' when calling AIControllerApi.generate_structured_content_from_email"
      end
      # resource path
      local_var_path = '/ai/structured-content/email'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(generate_structured_content_email_options) 

      # return_type
      return_type = opts[:return_type] || 'StructuredContentResultDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#generate_structured_content_from_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate structured content for a TXT message
    # Use output schemas to extract data from an SMS using AI
    # @param generate_structured_content_sms_options [GenerateStructuredContentSmsOptions] 
    # @param [Hash] opts the optional parameters
    # @return [StructuredContentResultDto]
    def generate_structured_content_from_sms(generate_structured_content_sms_options, opts = {})
      data, _status_code, _headers = generate_structured_content_from_sms_with_http_info(generate_structured_content_sms_options, opts)
      data
    end

    # Generate structured content for a TXT message
    # Use output schemas to extract data from an SMS using AI
    # @param generate_structured_content_sms_options [GenerateStructuredContentSmsOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StructuredContentResultDto, Integer, Hash)>] StructuredContentResultDto data, response status code and response headers
    def generate_structured_content_from_sms_with_http_info(generate_structured_content_sms_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.generate_structured_content_from_sms ...'
      end
      # verify the required parameter 'generate_structured_content_sms_options' is set
      if @api_client.config.client_side_validation && generate_structured_content_sms_options.nil?
        fail ArgumentError, "Missing the required parameter 'generate_structured_content_sms_options' when calling AIControllerApi.generate_structured_content_from_sms"
      end
      # resource path
      local_var_path = '/ai/structured-content/sms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(generate_structured_content_sms_options) 

      # return_type
      return_type = opts[:return_type] || 'StructuredContentResultDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#generate_structured_content_from_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a transformer
    # Get AI transformer and schemas by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AITransformDto]
    def get_transformer(id, opts = {})
      data, _status_code, _headers = get_transformer_with_http_info(id, opts)
      data
    end

    # Get a transformer
    # Get AI transformer and schemas by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AITransformDto, Integer, Hash)>] AITransformDto data, response status code and response headers
    def get_transformer_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.get_transformer ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AIControllerApi.get_transformer"
      end
      # resource path
      local_var_path = '/ai/transformer/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AITransformDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#get_transformer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transformer mapping
    # Get an AI transformer mapping
    # @param id [String] ID of transform mapping
    # @param [Hash] opts the optional parameters
    # @return [AITransformMappingDto]
    def get_transformer_mapping(id, opts = {})
      data, _status_code, _headers = get_transformer_mapping_with_http_info(id, opts)
      data
    end

    # Get transformer mapping
    # Get an AI transformer mapping
    # @param id [String] ID of transform mapping
    # @param [Hash] opts the optional parameters
    # @return [Array<(AITransformMappingDto, Integer, Hash)>] AITransformMappingDto data, response status code and response headers
    def get_transformer_mapping_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.get_transformer_mapping ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AIControllerApi.get_transformer_mapping"
      end
      # resource path
      local_var_path = '/ai/transformer/mappings/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AITransformMappingDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#get_transformer_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transformer mappings
    # Get AI transformer mappings to other entities
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ai_transform_id 
    # @option opts [String] :entity_id 
    # @option opts [String] :entity_type 
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size Optional page size. Maximum size is 100. Use page index and sort to page through larger results (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @return [PageAITransformMappingProjection]
    def get_transformer_mappings(opts = {})
      data, _status_code, _headers = get_transformer_mappings_with_http_info(opts)
      data
    end

    # Get transformer mappings
    # Get AI transformer mappings to other entities
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ai_transform_id 
    # @option opts [String] :entity_id 
    # @option opts [String] :entity_type 
    # @option opts [Integer] :page 
    # @option opts [Integer] :size Optional page size. Maximum size is 100. Use page index and sort to page through larger results
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @return [Array<(PageAITransformMappingProjection, Integer, Hash)>] PageAITransformMappingProjection data, response status code and response headers
    def get_transformer_mappings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.get_transformer_mappings ...'
      end
      allowable_values = ["INBOX", "PHONE"]
      if @api_client.config.client_side_validation && opts[:'entity_type'] && !allowable_values.include?(opts[:'entity_type'])
        fail ArgumentError, "invalid value for \"entity_type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling AIControllerApi.get_transformer_mappings, must be smaller than or equal to 100.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/ai/transformer/mappings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'aiTransformId'] = opts[:'ai_transform_id'] if !opts[:'ai_transform_id'].nil?
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'entityType'] = opts[:'entity_type'] if !opts[:'entity_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageAITransformMappingProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#get_transformer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transformer result
    # Get AI transformer result
    # @param id [String] ID of transform result
    # @param [Hash] opts the optional parameters
    # @return [AITransformResultDto]
    def get_transformer_result(id, opts = {})
      data, _status_code, _headers = get_transformer_result_with_http_info(id, opts)
      data
    end

    # Get transformer result
    # Get AI transformer result
    # @param id [String] ID of transform result
    # @param [Hash] opts the optional parameters
    # @return [Array<(AITransformResultDto, Integer, Hash)>] AITransformResultDto data, response status code and response headers
    def get_transformer_result_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.get_transformer_result ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AIControllerApi.get_transformer_result"
      end
      # resource path
      local_var_path = '/ai/transformer/results/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AITransformResultDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#get_transformer_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get transformer results
    # Get AI transformer results
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ai_transform_id 
    # @option opts [String] :ai_transform_mapping_id 
    # @option opts [String] :entity_id 
    # @option opts [String] :entity_type 
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size Optional page size. Maximum size is 100. Use page index and sort to page through larger results (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @return [PageAITransformResultProjection]
    def get_transformer_results(opts = {})
      data, _status_code, _headers = get_transformer_results_with_http_info(opts)
      data
    end

    # Get transformer results
    # Get AI transformer results
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ai_transform_id 
    # @option opts [String] :ai_transform_mapping_id 
    # @option opts [String] :entity_id 
    # @option opts [String] :entity_type 
    # @option opts [Integer] :page 
    # @option opts [Integer] :size Optional page size. Maximum size is 100. Use page index and sort to page through larger results
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @return [Array<(PageAITransformResultProjection, Integer, Hash)>] PageAITransformResultProjection data, response status code and response headers
    def get_transformer_results_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.get_transformer_results ...'
      end
      allowable_values = ["INBOX", "PHONE"]
      if @api_client.config.client_side_validation && opts[:'entity_type'] && !allowable_values.include?(opts[:'entity_type'])
        fail ArgumentError, "invalid value for \"entity_type\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling AIControllerApi.get_transformer_results, must be smaller than or equal to 100.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/ai/transformer/results'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'aiTransformId'] = opts[:'ai_transform_id'] if !opts[:'ai_transform_id'].nil?
      query_params[:'aiTransformMappingId'] = opts[:'ai_transform_mapping_id'] if !opts[:'ai_transform_mapping_id'].nil?
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'entityType'] = opts[:'entity_type'] if !opts[:'entity_type'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageAITransformResultProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#get_transformer_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate structured content schema
    # Check if a schema is valid and can be used to extract data using AI
    # @param structured_output_schema [StructuredOutputSchema] 
    # @param [Hash] opts the optional parameters
    # @return [StructuredOutputSchemaValidation]
    def validate_structured_output_schema(structured_output_schema, opts = {})
      data, _status_code, _headers = validate_structured_output_schema_with_http_info(structured_output_schema, opts)
      data
    end

    # Validate structured content schema
    # Check if a schema is valid and can be used to extract data using AI
    # @param structured_output_schema [StructuredOutputSchema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StructuredOutputSchemaValidation, Integer, Hash)>] StructuredOutputSchemaValidation data, response status code and response headers
    def validate_structured_output_schema_with_http_info(structured_output_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AIControllerApi.validate_structured_output_schema ...'
      end
      # verify the required parameter 'structured_output_schema' is set
      if @api_client.config.client_side_validation && structured_output_schema.nil?
        fail ArgumentError, "Missing the required parameter 'structured_output_schema' when calling AIControllerApi.validate_structured_output_schema"
      end
      # resource path
      local_var_path = '/ai/structured-content/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(structured_output_schema) 

      # return_type
      return_type = opts[:return_type] || 'StructuredOutputSchemaValidation' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AIControllerApi#validate_structured_output_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
