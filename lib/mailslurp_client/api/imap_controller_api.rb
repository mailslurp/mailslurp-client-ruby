=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module MailSlurpClient
  class ImapControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetch message in an inbox
    # @param seq_num [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to search
    # @return [ImapServerFetchResult]
    def imap_server_fetch(seq_num, opts = {})
      data, _status_code, _headers = imap_server_fetch_with_http_info(seq_num, opts)
      data
    end

    # Fetch message in an inbox
    # @param seq_num [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to search
    # @return [Array<(ImapServerFetchResult, Integer, Hash)>] ImapServerFetchResult data, response status code and response headers
    def imap_server_fetch_with_http_info(seq_num, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImapControllerApi.imap_server_fetch ...'
      end
      # verify the required parameter 'seq_num' is set
      if @api_client.config.client_side_validation && seq_num.nil?
        fail ArgumentError, "Missing the required parameter 'seq_num' when calling ImapControllerApi.imap_server_fetch"
      end
      # resource path
      local_var_path = '/imap/server/fetch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'seqNum'] = seq_num
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ImapServerFetchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImapControllerApi#imap_server_fetch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a message by email ID
    # @param email_id [String] Email ID to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to search
    # @return [ImapServerGetResult]
    def imap_server_get(email_id, opts = {})
      data, _status_code, _headers = imap_server_get_with_http_info(email_id, opts)
      data
    end

    # Get a message by email ID
    # @param email_id [String] Email ID to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to search
    # @return [Array<(ImapServerGetResult, Integer, Hash)>] ImapServerGetResult data, response status code and response headers
    def imap_server_get_with_http_info(email_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImapControllerApi.imap_server_get ...'
      end
      # verify the required parameter 'email_id' is set
      if @api_client.config.client_side_validation && email_id.nil?
        fail ArgumentError, "Missing the required parameter 'email_id' when calling ImapControllerApi.imap_server_get"
      end
      # resource path
      local_var_path = '/imap/server/get'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'emailId'] = email_id
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ImapServerGetResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImapControllerApi#imap_server_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List messages in an inbox
    # @param imap_server_list_options [ImapServerListOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to list
    # @return [ImapServerListResult]
    def imap_server_list(imap_server_list_options, opts = {})
      data, _status_code, _headers = imap_server_list_with_http_info(imap_server_list_options, opts)
      data
    end

    # List messages in an inbox
    # @param imap_server_list_options [ImapServerListOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to list
    # @return [Array<(ImapServerListResult, Integer, Hash)>] ImapServerListResult data, response status code and response headers
    def imap_server_list_with_http_info(imap_server_list_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImapControllerApi.imap_server_list ...'
      end
      # verify the required parameter 'imap_server_list_options' is set
      if @api_client.config.client_side_validation && imap_server_list_options.nil?
        fail ArgumentError, "Missing the required parameter 'imap_server_list_options' when calling ImapControllerApi.imap_server_list"
      end
      # resource path
      local_var_path = '/imap/server/list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(imap_server_list_options) 

      # return_type
      return_type = opts[:return_type] || 'ImapServerListResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImapControllerApi#imap_server_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search messages in an inbox
    # @param imap_server_search_options [ImapServerSearchOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to search
    # @return [ImapServerSearchResult]
    def imap_server_search(imap_server_search_options, opts = {})
      data, _status_code, _headers = imap_server_search_with_http_info(imap_server_search_options, opts)
      data
    end

    # Search messages in an inbox
    # @param imap_server_search_options [ImapServerSearchOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to search
    # @return [Array<(ImapServerSearchResult, Integer, Hash)>] ImapServerSearchResult data, response status code and response headers
    def imap_server_search_with_http_info(imap_server_search_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImapControllerApi.imap_server_search ...'
      end
      # verify the required parameter 'imap_server_search_options' is set
      if @api_client.config.client_side_validation && imap_server_search_options.nil?
        fail ArgumentError, "Missing the required parameter 'imap_server_search_options' when calling ImapControllerApi.imap_server_search"
      end
      # resource path
      local_var_path = '/imap/server/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(imap_server_search_options) 

      # return_type
      return_type = opts[:return_type] || 'ImapServerSearchResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImapControllerApi#imap_server_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get status for mailbox
    # @param imap_server_status_options [ImapServerStatusOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to list
    # @return [ImapServerStatusResult]
    def imap_server_status(imap_server_status_options, opts = {})
      data, _status_code, _headers = imap_server_status_with_http_info(imap_server_status_options, opts)
      data
    end

    # Get status for mailbox
    # @param imap_server_status_options [ImapServerStatusOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Inbox ID to list
    # @return [Array<(ImapServerStatusResult, Integer, Hash)>] ImapServerStatusResult data, response status code and response headers
    def imap_server_status_with_http_info(imap_server_status_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImapControllerApi.imap_server_status ...'
      end
      # verify the required parameter 'imap_server_status_options' is set
      if @api_client.config.client_side_validation && imap_server_status_options.nil?
        fail ArgumentError, "Missing the required parameter 'imap_server_status_options' when calling ImapControllerApi.imap_server_status"
      end
      # resource path
      local_var_path = '/imap/server/status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(imap_server_status_options) 

      # return_type
      return_type = opts[:return_type] || 'ImapServerStatusResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImapControllerApi#imap_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update message flags
    # @param imap_update_flags_options [ImapUpdateFlagsOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id 
    # @return [nil]
    def imap_server_update_flags(imap_update_flags_options, opts = {})
      imap_server_update_flags_with_http_info(imap_update_flags_options, opts)
      nil
    end

    # Update message flags
    # @param imap_update_flags_options [ImapUpdateFlagsOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def imap_server_update_flags_with_http_info(imap_update_flags_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImapControllerApi.imap_server_update_flags ...'
      end
      # verify the required parameter 'imap_update_flags_options' is set
      if @api_client.config.client_side_validation && imap_update_flags_options.nil?
        fail ArgumentError, "Missing the required parameter 'imap_update_flags_options' when calling ImapControllerApi.imap_server_update_flags"
      end
      # resource path
      local_var_path = '/imap/server/update-flags'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(imap_update_flags_options) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImapControllerApi#imap_server_update_flags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
