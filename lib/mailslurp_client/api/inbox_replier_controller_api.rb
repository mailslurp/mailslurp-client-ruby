=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module MailSlurpClient
  class InboxReplierControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an inbox replier
    # Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
    # @param create_inbox_replier_options [CreateInboxReplierOptions] 
    # @param [Hash] opts the optional parameters
    # @return [InboxReplierDto]
    def create_new_inbox_replier(create_inbox_replier_options, opts = {})
      data, _status_code, _headers = create_new_inbox_replier_with_http_info(create_inbox_replier_options, opts)
      data
    end

    # Create an inbox replier
    # Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
    # @param create_inbox_replier_options [CreateInboxReplierOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboxReplierDto, Integer, Hash)>] InboxReplierDto data, response status code and response headers
    def create_new_inbox_replier_with_http_info(create_inbox_replier_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxReplierControllerApi.create_new_inbox_replier ...'
      end
      # verify the required parameter 'create_inbox_replier_options' is set
      if @api_client.config.client_side_validation && create_inbox_replier_options.nil?
        fail ArgumentError, "Missing the required parameter 'create_inbox_replier_options' when calling InboxReplierControllerApi.create_new_inbox_replier"
      end
      # resource path
      local_var_path = '/repliers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_inbox_replier_options) 

      # return_type
      return_type = opts[:return_type] || 'InboxReplierDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxReplierControllerApi#create_new_inbox_replier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an inbox replier
    # Delete inbox replier
    # @param id [String] ID of inbox replier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_inbox_replier(id, opts = {})
      delete_inbox_replier_with_http_info(id, opts)
      nil
    end

    # Delete an inbox replier
    # Delete inbox replier
    # @param id [String] ID of inbox replier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_inbox_replier_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxReplierControllerApi.delete_inbox_replier ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InboxReplierControllerApi.delete_inbox_replier"
      end
      # resource path
      local_var_path = '/repliers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxReplierControllerApi#delete_inbox_replier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete inbox repliers
    # Delete inbox repliers. Accepts optional inboxId filter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Optional inbox id to attach replier to
    # @return [nil]
    def delete_inbox_repliers(opts = {})
      delete_inbox_repliers_with_http_info(opts)
      nil
    end

    # Delete inbox repliers
    # Delete inbox repliers. Accepts optional inboxId filter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Optional inbox id to attach replier to
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_inbox_repliers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxReplierControllerApi.delete_inbox_repliers ...'
      end
      # resource path
      local_var_path = '/repliers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxReplierControllerApi#delete_inbox_repliers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an inbox replier
    # Get inbox ruleset
    # @param id [String] ID of inbox replier
    # @param [Hash] opts the optional parameters
    # @return [InboxReplierDto]
    def get_inbox_replier(id, opts = {})
      data, _status_code, _headers = get_inbox_replier_with_http_info(id, opts)
      data
    end

    # Get an inbox replier
    # Get inbox ruleset
    # @param id [String] ID of inbox replier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboxReplierDto, Integer, Hash)>] InboxReplierDto data, response status code and response headers
    def get_inbox_replier_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxReplierControllerApi.get_inbox_replier ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InboxReplierControllerApi.get_inbox_replier"
      end
      # resource path
      local_var_path = '/repliers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InboxReplierDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxReplierControllerApi#get_inbox_replier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an inbox replier event list
    # Get inbox ruleset events
    # @param id [String] ID of inbox replier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Optional page index in inbox replier event list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in inbox replier event list pagination (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @return [PageInboxReplierEvents]
    def get_inbox_replier_events(id, opts = {})
      data, _status_code, _headers = get_inbox_replier_events_with_http_info(id, opts)
      data
    end

    # Get an inbox replier event list
    # Get inbox ruleset events
    # @param id [String] ID of inbox replier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Optional page index in inbox replier event list pagination
    # @option opts [Integer] :size Optional page size in inbox replier event list pagination
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @return [Array<(PageInboxReplierEvents, Integer, Hash)>] PageInboxReplierEvents data, response status code and response headers
    def get_inbox_replier_events_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxReplierControllerApi.get_inbox_replier_events ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InboxReplierControllerApi.get_inbox_replier_events"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repliers/{id}/events'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageInboxReplierEvents' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxReplierControllerApi#get_inbox_replier_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List inbox repliers
    # List all repliers attached to an inbox
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Optional inbox id to get repliers from
    # @option opts [Integer] :page Optional page index in inbox replier list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in inbox replier list pagination (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @option opts [DateTime] :since Filter by created at after the given timestamp
    # @option opts [DateTime] :before Filter by created at before the given timestamp
    # @return [PageInboxReplierDto]
    def get_inbox_repliers(opts = {})
      data, _status_code, _headers = get_inbox_repliers_with_http_info(opts)
      data
    end

    # List inbox repliers
    # List all repliers attached to an inbox
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Optional inbox id to get repliers from
    # @option opts [Integer] :page Optional page index in inbox replier list pagination
    # @option opts [Integer] :size Optional page size in inbox replier list pagination
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @option opts [DateTime] :since Filter by created at after the given timestamp
    # @option opts [DateTime] :before Filter by created at before the given timestamp
    # @return [Array<(PageInboxReplierDto, Integer, Hash)>] PageInboxReplierDto data, response status code and response headers
    def get_inbox_repliers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxReplierControllerApi.get_inbox_repliers ...'
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/repliers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageInboxReplierDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxReplierControllerApi#get_inbox_repliers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an inbox replier
    # Update inbox ruleset
    # @param id [String] ID of inbox replier
    # @param update_inbox_replier_options [UpdateInboxReplierOptions] 
    # @param [Hash] opts the optional parameters
    # @return [InboxReplierDto]
    def update_inbox_replier(id, update_inbox_replier_options, opts = {})
      data, _status_code, _headers = update_inbox_replier_with_http_info(id, update_inbox_replier_options, opts)
      data
    end

    # Update an inbox replier
    # Update inbox ruleset
    # @param id [String] ID of inbox replier
    # @param update_inbox_replier_options [UpdateInboxReplierOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboxReplierDto, Integer, Hash)>] InboxReplierDto data, response status code and response headers
    def update_inbox_replier_with_http_info(id, update_inbox_replier_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InboxReplierControllerApi.update_inbox_replier ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InboxReplierControllerApi.update_inbox_replier"
      end
      # verify the required parameter 'update_inbox_replier_options' is set
      if @api_client.config.client_side_validation && update_inbox_replier_options.nil?
        fail ArgumentError, "Missing the required parameter 'update_inbox_replier_options' when calling InboxReplierControllerApi.update_inbox_replier"
      end
      # resource path
      local_var_path = '/repliers/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(update_inbox_replier_options) 

      # return_type
      return_type = opts[:return_type] || 'InboxReplierDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InboxReplierControllerApi#update_inbox_replier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
