=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module MailSlurpClient
  class SmsControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete sent SMS message.
    # Delete a sent SMS message
    # @param sent_sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sent_sms_message(sent_sms_id, opts = {})
      delete_sent_sms_message_with_http_info(sent_sms_id, opts)
      nil
    end

    # Delete sent SMS message.
    # Delete a sent SMS message
    # @param sent_sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_sent_sms_message_with_http_info(sent_sms_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.delete_sent_sms_message ...'
      end
      # verify the required parameter 'sent_sms_id' is set
      if @api_client.config.client_side_validation && sent_sms_id.nil?
        fail ArgumentError, "Missing the required parameter 'sent_sms_id' when calling SmsControllerApi.delete_sent_sms_message"
      end
      # resource path
      local_var_path = '/sms/sent/{sentSmsId}'.sub('{' + 'sentSmsId' + '}', CGI.escape(sent_sms_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#delete_sent_sms_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all sent SMS messages
    # Delete all sent SMS messages or all messages for a given phone number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number_id 
    # @return [nil]
    def delete_sent_sms_messages(opts = {})
      delete_sent_sms_messages_with_http_info(opts)
      nil
    end

    # Delete all sent SMS messages
    # Delete all sent SMS messages or all messages for a given phone number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_sent_sms_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.delete_sent_sms_messages ...'
      end
      # resource path
      local_var_path = '/sms/sent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phoneNumberId'] = opts[:'phone_number_id'] if !opts[:'phone_number_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#delete_sent_sms_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SMS message.
    # Delete an SMS message
    # @param sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sms_message(sms_id, opts = {})
      delete_sms_message_with_http_info(sms_id, opts)
      nil
    end

    # Delete SMS message.
    # Delete an SMS message
    # @param sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_sms_message_with_http_info(sms_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.delete_sms_message ...'
      end
      # verify the required parameter 'sms_id' is set
      if @api_client.config.client_side_validation && sms_id.nil?
        fail ArgumentError, "Missing the required parameter 'sms_id' when calling SmsControllerApi.delete_sms_message"
      end
      # resource path
      local_var_path = '/sms/{smsId}'.sub('{' + 'smsId' + '}', CGI.escape(sms_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#delete_sms_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all SMS messages
    # Delete all SMS messages or all messages for a given phone number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number_id 
    # @return [nil]
    def delete_sms_messages(opts = {})
      delete_sms_messages_with_http_info(opts)
      nil
    end

    # Delete all SMS messages
    # Delete all SMS messages or all messages for a given phone number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_sms_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.delete_sms_messages ...'
      end
      # resource path
      local_var_path = '/sms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phoneNumberId'] = opts[:'phone_number_id'] if !opts[:'phone_number_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#delete_sms_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number Optional receiving phone number to filter SMS messages for
    # @option opts [Integer] :page Optional page index in SMS list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @option opts [DateTime] :since Optional filter SMSs received after given date time
    # @option opts [DateTime] :before Optional filter SMSs received before given date time
    # @option opts [String] :search Optional search filter
    # @option opts [Boolean] :favourite Optionally filter results for favourites only (default to false)
    # @return [PageSmsProjection]
    def get_all_sms_messages(opts = {})
      data, _status_code, _headers = get_all_sms_messages_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number Optional receiving phone number to filter SMS messages for
    # @option opts [Integer] :page Optional page index in SMS list pagination
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @option opts [DateTime] :since Optional filter SMSs received after given date time
    # @option opts [DateTime] :before Optional filter SMSs received before given date time
    # @option opts [String] :search Optional search filter
    # @option opts [Boolean] :favourite Optionally filter results for favourites only
    # @return [Array<(PageSmsProjection, Integer, Hash)>] PageSmsProjection data, response status code and response headers
    def get_all_sms_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.get_all_sms_messages ...'
      end
      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling SmsControllerApi.get_all_sms_messages, must be smaller than or equal to 100.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phoneNumber'] = opts[:'phone_number'] if !opts[:'phone_number'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'favourite'] = opts[:'favourite'] if !opts[:'favourite'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageSmsProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#get_all_sms_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get reply for an SMS message
    # Get reply for an SMS message.
    # @param sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ReplyForSms]
    def get_reply_for_sms_message(sms_id, opts = {})
      data, _status_code, _headers = get_reply_for_sms_message_with_http_info(sms_id, opts)
      data
    end

    # Get reply for an SMS message
    # Get reply for an SMS message.
    # @param sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReplyForSms, Integer, Hash)>] ReplyForSms data, response status code and response headers
    def get_reply_for_sms_message_with_http_info(sms_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.get_reply_for_sms_message ...'
      end
      # verify the required parameter 'sms_id' is set
      if @api_client.config.client_side_validation && sms_id.nil?
        fail ArgumentError, "Missing the required parameter 'sms_id' when calling SmsControllerApi.get_reply_for_sms_message"
      end
      # resource path
      local_var_path = '/sms/{smsId}/reply'.sub('{' + 'smsId' + '}', CGI.escape(sms_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ReplyForSms' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#get_reply_for_sms_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sent SMS count
    # Get number of sent SMS
    # @param [Hash] opts the optional parameters
    # @return [CountDto]
    def get_sent_sms_count(opts = {})
      data, _status_code, _headers = get_sent_sms_count_with_http_info(opts)
      data
    end

    # Get sent SMS count
    # Get number of sent SMS
    # @param [Hash] opts the optional parameters
    # @return [Array<(CountDto, Integer, Hash)>] CountDto data, response status code and response headers
    def get_sent_sms_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.get_sent_sms_count ...'
      end
      # resource path
      local_var_path = '/sms/sent/count'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CountDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#get_sent_sms_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sent SMS content including body. Expects sent SMS to exist by ID.
    # Returns an SMS summary object with content.
    # @param sent_sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [SentSmsDto]
    def get_sent_sms_message(sent_sms_id, opts = {})
      data, _status_code, _headers = get_sent_sms_message_with_http_info(sent_sms_id, opts)
      data
    end

    # Get sent SMS content including body. Expects sent SMS to exist by ID.
    # Returns an SMS summary object with content.
    # @param sent_sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SentSmsDto, Integer, Hash)>] SentSmsDto data, response status code and response headers
    def get_sent_sms_message_with_http_info(sent_sms_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.get_sent_sms_message ...'
      end
      # verify the required parameter 'sent_sms_id' is set
      if @api_client.config.client_side_validation && sent_sms_id.nil?
        fail ArgumentError, "Missing the required parameter 'sent_sms_id' when calling SmsControllerApi.get_sent_sms_message"
      end
      # resource path
      local_var_path = '/sms/sent/{sentSmsId}'.sub('{' + 'sentSmsId' + '}', CGI.escape(sent_sms_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SentSmsDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#get_sent_sms_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all SMS messages in all phone numbers in paginated form. .
    # By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number Optional phone number to filter sent SMS messages for
    # @option opts [Integer] :page Optional page index in SMS list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @option opts [DateTime] :since Optional filter SMSs received after given date time
    # @option opts [DateTime] :before Optional filter SMSs received before given date time
    # @option opts [String] :search Optional search filter
    # @return [PageSentSmsProjection]
    def get_sent_sms_messages_paginated(opts = {})
      data, _status_code, _headers = get_sent_sms_messages_paginated_with_http_info(opts)
      data
    end

    # Get all SMS messages in all phone numbers in paginated form. .
    # By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number Optional phone number to filter sent SMS messages for
    # @option opts [Integer] :page Optional page index in SMS list pagination
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @option opts [DateTime] :since Optional filter SMSs received after given date time
    # @option opts [DateTime] :before Optional filter SMSs received before given date time
    # @option opts [String] :search Optional search filter
    # @return [Array<(PageSentSmsProjection, Integer, Hash)>] PageSentSmsProjection data, response status code and response headers
    def get_sent_sms_messages_paginated_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.get_sent_sms_messages_paginated ...'
      end
      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling SmsControllerApi.get_sent_sms_messages_paginated, must be smaller than or equal to 100.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sms/sent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phoneNumber'] = opts[:'phone_number'] if !opts[:'phone_number'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageSentSmsProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#get_sent_sms_messages_paginated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SMS count
    # Get number of SMS
    # @param [Hash] opts the optional parameters
    # @return [CountDto]
    def get_sms_count(opts = {})
      data, _status_code, _headers = get_sms_count_with_http_info(opts)
      data
    end

    # Get SMS count
    # Get number of SMS
    # @param [Hash] opts the optional parameters
    # @return [Array<(CountDto, Integer, Hash)>] CountDto data, response status code and response headers
    def get_sms_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.get_sms_count ...'
      end
      # resource path
      local_var_path = '/sms/count'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CountDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#get_sms_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
    # Returns a SMS summary object with content.
    # @param sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [SmsDto]
    def get_sms_message(sms_id, opts = {})
      data, _status_code, _headers = get_sms_message_with_http_info(sms_id, opts)
      data
    end

    # Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
    # Returns a SMS summary object with content.
    # @param sms_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsDto, Integer, Hash)>] SmsDto data, response status code and response headers
    def get_sms_message_with_http_info(sms_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.get_sms_message ...'
      end
      # verify the required parameter 'sms_id' is set
      if @api_client.config.client_side_validation && sms_id.nil?
        fail ArgumentError, "Missing the required parameter 'sms_id' when calling SmsControllerApi.get_sms_message"
      end
      # resource path
      local_var_path = '/sms/{smsId}'.sub('{' + 'smsId' + '}', CGI.escape(sms_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SmsDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#get_sms_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get unread SMS count
    # Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
    # @param [Hash] opts the optional parameters
    # @return [UnreadCount]
    def get_unread_sms_count(opts = {})
      data, _status_code, _headers = get_unread_sms_count_with_http_info(opts)
      data
    end

    # Get unread SMS count
    # Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnreadCount, Integer, Hash)>] UnreadCount data, response status code and response headers
    def get_unread_sms_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.get_unread_sms_count ...'
      end
      # resource path
      local_var_path = '/sms/unreadCount'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'UnreadCount' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#get_unread_sms_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a reply to a received SMS message. Replies are sent from the receiving number.
    # Reply to an SMS message.
    # @param sms_id [String] 
    # @param sms_reply_options [SmsReplyOptions] 
    # @param [Hash] opts the optional parameters
    # @return [SentSmsDto]
    def reply_to_sms_message(sms_id, sms_reply_options, opts = {})
      data, _status_code, _headers = reply_to_sms_message_with_http_info(sms_id, sms_reply_options, opts)
      data
    end

    # Send a reply to a received SMS message. Replies are sent from the receiving number.
    # Reply to an SMS message.
    # @param sms_id [String] 
    # @param sms_reply_options [SmsReplyOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SentSmsDto, Integer, Hash)>] SentSmsDto data, response status code and response headers
    def reply_to_sms_message_with_http_info(sms_id, sms_reply_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.reply_to_sms_message ...'
      end
      # verify the required parameter 'sms_id' is set
      if @api_client.config.client_side_validation && sms_id.nil?
        fail ArgumentError, "Missing the required parameter 'sms_id' when calling SmsControllerApi.reply_to_sms_message"
      end
      # verify the required parameter 'sms_reply_options' is set
      if @api_client.config.client_side_validation && sms_reply_options.nil?
        fail ArgumentError, "Missing the required parameter 'sms_reply_options' when calling SmsControllerApi.reply_to_sms_message"
      end
      # resource path
      local_var_path = '/sms/{smsId}/reply'.sub('{' + 'smsId' + '}', CGI.escape(sms_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(sms_reply_options) 

      # return_type
      return_type = opts[:return_type] || 'SentSmsDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#reply_to_sms_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param sms_send_options [SmsSendOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_phone_number Phone number to send from in E.164 format
    # @option opts [String] :from_phone_id Phone number ID to send from in UUID form
    # @return [SentSmsDto]
    def send_sms(sms_send_options, opts = {})
      data, _status_code, _headers = send_sms_with_http_info(sms_send_options, opts)
      data
    end

    # @param sms_send_options [SmsSendOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from_phone_number Phone number to send from in E.164 format
    # @option opts [String] :from_phone_id Phone number ID to send from in UUID form
    # @return [Array<(SentSmsDto, Integer, Hash)>] SentSmsDto data, response status code and response headers
    def send_sms_with_http_info(sms_send_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.send_sms ...'
      end
      # verify the required parameter 'sms_send_options' is set
      if @api_client.config.client_side_validation && sms_send_options.nil?
        fail ArgumentError, "Missing the required parameter 'sms_send_options' when calling SmsControllerApi.send_sms"
      end
      # resource path
      local_var_path = '/sms/send'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fromPhoneNumber'] = opts[:'from_phone_number'] if !opts[:'from_phone_number'].nil?
      query_params[:'fromPhoneId'] = opts[:'from_phone_id'] if !opts[:'from_phone_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(sms_send_options) 

      # return_type
      return_type = opts[:return_type] || 'SentSmsDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#send_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param sms_id [String] ID of SMS to set favourite state
    # @param favourited [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [SmsDto]
    def set_sms_favourited(sms_id, favourited, opts = {})
      data, _status_code, _headers = set_sms_favourited_with_http_info(sms_id, favourited, opts)
      data
    end

    # @param sms_id [String] ID of SMS to set favourite state
    # @param favourited [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsDto, Integer, Hash)>] SmsDto data, response status code and response headers
    def set_sms_favourited_with_http_info(sms_id, favourited, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SmsControllerApi.set_sms_favourited ...'
      end
      # verify the required parameter 'sms_id' is set
      if @api_client.config.client_side_validation && sms_id.nil?
        fail ArgumentError, "Missing the required parameter 'sms_id' when calling SmsControllerApi.set_sms_favourited"
      end
      # verify the required parameter 'favourited' is set
      if @api_client.config.client_side_validation && favourited.nil?
        fail ArgumentError, "Missing the required parameter 'favourited' when calling SmsControllerApi.set_sms_favourited"
      end
      # resource path
      local_var_path = '/sms/{smsId}/favourite'.sub('{' + 'smsId' + '}', CGI.escape(sms_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'favourited'] = favourited

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SmsDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SmsControllerApi#set_sms_favourited\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
