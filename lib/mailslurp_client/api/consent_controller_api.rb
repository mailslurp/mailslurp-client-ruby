=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module MailSlurpClient
  class ConsentControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param email_address [String] Email address to check consent for
    # @param [Hash] opts the optional parameters
    # @return [OptInSendingConsentDto]
    def check_sending_consent_for_email_address(email_address, opts = {})
      data, _status_code, _headers = check_sending_consent_for_email_address_with_http_info(email_address, opts)
      data
    end

    # @param email_address [String] Email address to check consent for
    # @param [Hash] opts the optional parameters
    # @return [Array<(OptInSendingConsentDto, Integer, Hash)>] OptInSendingConsentDto data, response status code and response headers
    def check_sending_consent_for_email_address_with_http_info(email_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsentControllerApi.check_sending_consent_for_email_address ...'
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling ConsentControllerApi.check_sending_consent_for_email_address"
      end
      # resource path
      local_var_path = '/consent/opt-in/sending-consent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'emailAddress'] = email_address

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OptInSendingConsentDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsentControllerApi#check_sending_consent_for_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Optional page index in list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in list pagination (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @return [PageOptInIdentityProjection]
    def get_opt_in_identities(opts = {})
      data, _status_code, _headers = get_opt_in_identities_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Optional page index in list pagination
    # @option opts [Integer] :size Optional page size in list pagination
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @return [Array<(PageOptInIdentityProjection, Integer, Hash)>] PageOptInIdentityProjection data, response status code and response headers
    def get_opt_in_identities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsentControllerApi.get_opt_in_identities ...'
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/consent/opt-in'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageOptInIdentityProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsentControllerApi#get_opt_in_identities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param email_address [String] Email address to revoke consent for
    # @param [Hash] opts the optional parameters
    # @return [OptInSendingConsentDto]
    def revoke_opt_in_consent_for_email_address(email_address, opts = {})
      data, _status_code, _headers = revoke_opt_in_consent_for_email_address_with_http_info(email_address, opts)
      data
    end

    # @param email_address [String] Email address to revoke consent for
    # @param [Hash] opts the optional parameters
    # @return [Array<(OptInSendingConsentDto, Integer, Hash)>] OptInSendingConsentDto data, response status code and response headers
    def revoke_opt_in_consent_for_email_address_with_http_info(email_address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsentControllerApi.revoke_opt_in_consent_for_email_address ...'
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling ConsentControllerApi.revoke_opt_in_consent_for_email_address"
      end
      # resource path
      local_var_path = '/consent/opt-in'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'emailAddress'] = email_address

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OptInSendingConsentDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsentControllerApi#revoke_opt_in_consent_for_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a verification code to a user once they have explicitly submitted their email address
    # Send double-opt in consent for an email address
    # @param opt_in_consent_options [OptInConsentOptions] 
    # @param [Hash] opts the optional parameters
    # @return [OptInConsentSendResult]
    def send_opt_in_consent_for_email_address(opt_in_consent_options, opts = {})
      data, _status_code, _headers = send_opt_in_consent_for_email_address_with_http_info(opt_in_consent_options, opts)
      data
    end

    # Send a verification code to a user once they have explicitly submitted their email address
    # Send double-opt in consent for an email address
    # @param opt_in_consent_options [OptInConsentOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OptInConsentSendResult, Integer, Hash)>] OptInConsentSendResult data, response status code and response headers
    def send_opt_in_consent_for_email_address_with_http_info(opt_in_consent_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsentControllerApi.send_opt_in_consent_for_email_address ...'
      end
      # verify the required parameter 'opt_in_consent_options' is set
      if @api_client.config.client_side_validation && opt_in_consent_options.nil?
        fail ArgumentError, "Missing the required parameter 'opt_in_consent_options' when calling ConsentControllerApi.send_opt_in_consent_for_email_address"
      end
      # resource path
      local_var_path = '/consent/opt-in/send'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opt_in_consent_options) 

      # return_type
      return_type = opts[:return_type] || 'OptInConsentSendResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsentControllerApi#send_opt_in_consent_for_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
