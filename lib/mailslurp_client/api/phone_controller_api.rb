=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module MailSlurpClient
  class PhoneControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an emergency address
    # Add an emergency address to a phone number
    # @param create_emergency_address_options [CreateEmergencyAddressOptions] 
    # @param [Hash] opts the optional parameters
    # @return [EmergencyAddress]
    def create_emergency_address(create_emergency_address_options, opts = {})
      data, _status_code, _headers = create_emergency_address_with_http_info(create_emergency_address_options, opts)
      data
    end

    # Create an emergency address
    # Add an emergency address to a phone number
    # @param create_emergency_address_options [CreateEmergencyAddressOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmergencyAddress, Integer, Hash)>] EmergencyAddress data, response status code and response headers
    def create_emergency_address_with_http_info(create_emergency_address_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.create_emergency_address ...'
      end
      # verify the required parameter 'create_emergency_address_options' is set
      if @api_client.config.client_side_validation && create_emergency_address_options.nil?
        fail ArgumentError, "Missing the required parameter 'create_emergency_address_options' when calling PhoneControllerApi.create_emergency_address"
      end
      # resource path
      local_var_path = '/phone/emergency-addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_emergency_address_options) 

      # return_type
      return_type = opts[:return_type] || 'EmergencyAddress' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#create_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
    # Create new phone number
    # @param create_phone_number_options [CreatePhoneNumberOptions] 
    # @param [Hash] opts the optional parameters
    # @return [PhoneNumberDto]
    def create_phone_number(create_phone_number_options, opts = {})
      data, _status_code, _headers = create_phone_number_with_http_info(create_phone_number_options, opts)
      data
    end

    # Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
    # Create new phone number
    # @param create_phone_number_options [CreatePhoneNumberOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def create_phone_number_with_http_info(create_phone_number_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.create_phone_number ...'
      end
      # verify the required parameter 'create_phone_number_options' is set
      if @api_client.config.client_side_validation && create_phone_number_options.nil?
        fail ArgumentError, "Missing the required parameter 'create_phone_number_options' when calling PhoneControllerApi.create_phone_number"
      end
      # resource path
      local_var_path = '/phone'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_phone_number_options) 

      # return_type
      return_type = opts[:return_type] || 'PhoneNumberDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#create_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an emergency address
    # Delete an emergency address
    # @param address_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponseDto]
    def delete_emergency_address(address_id, opts = {})
      data, _status_code, _headers = delete_emergency_address_with_http_info(address_id, opts)
      data
    end

    # Delete an emergency address
    # Delete an emergency address
    # @param address_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponseDto, Integer, Hash)>] EmptyResponseDto data, response status code and response headers
    def delete_emergency_address_with_http_info(address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.delete_emergency_address ...'
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling PhoneControllerApi.delete_emergency_address"
      end
      # resource path
      local_var_path = '/phone/emergency-addresses/{addressId}'.sub('{' + 'addressId' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EmptyResponseDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#delete_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a phone number
    # Remove phone number from account
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_phone_number(phone_number_id, opts = {})
      delete_phone_number_with_http_info(phone_number_id, opts)
      nil
    end

    # Delete a phone number
    # Remove phone number from account
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_phone_number_with_http_info(phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.delete_phone_number ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.delete_phone_number"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#delete_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest messages for all phones
    # List all message threads for all phones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 20)
    # @return [PagePhoneMessageThreadProjection]
    def get_all_phone_message_threads(opts = {})
      data, _status_code, _headers = get_all_phone_message_threads_with_http_info(opts)
      data
    end

    # Get the latest messages for all phones
    # List all message threads for all phones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :size 
    # @return [Array<(PagePhoneMessageThreadProjection, Integer, Hash)>] PagePhoneMessageThreadProjection data, response status code and response headers
    def get_all_phone_message_threads_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_all_phone_message_threads ...'
      end
      # resource path
      local_var_path = '/phone/numbers/message-threads'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PagePhoneMessageThreadProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_all_phone_message_threads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consent status
    # Get the status of phone usage consent
    # @param [Hash] opts the optional parameters
    # @return [ConsentStatusDto]
    def get_consent_status(opts = {})
      data, _status_code, _headers = get_consent_status_with_http_info(opts)
      data
    end

    # Get consent status
    # Get the status of phone usage consent
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsentStatusDto, Integer, Hash)>] ConsentStatusDto data, response status code and response headers
    def get_consent_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_consent_status ...'
      end
      # resource path
      local_var_path = '/phone/consent'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ConsentStatusDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_consent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an emergency address
    # Fetch an emergency address by ID
    # @param address_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EmergencyAddress]
    def get_emergency_address(address_id, opts = {})
      data, _status_code, _headers = get_emergency_address_with_http_info(address_id, opts)
      data
    end

    # Get an emergency address
    # Fetch an emergency address by ID
    # @param address_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmergencyAddress, Integer, Hash)>] EmergencyAddress data, response status code and response headers
    def get_emergency_address_with_http_info(address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_emergency_address ...'
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling PhoneControllerApi.get_emergency_address"
      end
      # resource path
      local_var_path = '/phone/emergency-addresses/{addressId}'.sub('{' + 'addressId' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EmergencyAddress' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get emergency addresses
    # List emergency addresses
    # @param [Hash] opts the optional parameters
    # @return [Array<EmergencyAddressDto>]
    def get_emergency_addresses(opts = {})
      data, _status_code, _headers = get_emergency_addresses_with_http_info(opts)
      data
    end

    # Get emergency addresses
    # List emergency addresses
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EmergencyAddressDto>, Integer, Hash)>] Array<EmergencyAddressDto> data, response status code and response headers
    def get_emergency_addresses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_emergency_addresses ...'
      end
      # resource path
      local_var_path = '/phone/emergency-addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EmergencyAddressDto>' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_emergency_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get messages in a phone thread
    # List message thread messages for a phone message thread
    # @param phone_number_id [String] 
    # @param other_number [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 20)
    # @return [PagePhoneMessageThreadItemProjection]
    def get_phone_message_thread_items(phone_number_id, other_number, opts = {})
      data, _status_code, _headers = get_phone_message_thread_items_with_http_info(phone_number_id, other_number, opts)
      data
    end

    # Get messages in a phone thread
    # List message thread messages for a phone message thread
    # @param phone_number_id [String] 
    # @param other_number [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :size 
    # @return [Array<(PagePhoneMessageThreadItemProjection, Integer, Hash)>] PagePhoneMessageThreadItemProjection data, response status code and response headers
    def get_phone_message_thread_items_with_http_info(phone_number_id, other_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_phone_message_thread_items ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_phone_message_thread_items"
      end
      # verify the required parameter 'other_number' is set
      if @api_client.config.client_side_validation && other_number.nil?
        fail ArgumentError, "Missing the required parameter 'other_number' when calling PhoneControllerApi.get_phone_message_thread_items"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s)).sub('{' + 'otherNumber' + '}', CGI.escape(other_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PagePhoneMessageThreadItemProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_phone_message_thread_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest message preview for a thread
    # List message threads for a phone
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 20)
    # @return [PagePhoneMessageThreadProjection]
    def get_phone_message_threads(phone_number_id, opts = {})
      data, _status_code, _headers = get_phone_message_threads_with_http_info(phone_number_id, opts)
      data
    end

    # Get the latest message preview for a thread
    # List message threads for a phone
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :size 
    # @return [Array<(PagePhoneMessageThreadProjection, Integer, Hash)>] PagePhoneMessageThreadProjection data, response status code and response headers
    def get_phone_message_threads_with_http_info(phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_phone_message_threads ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_phone_message_threads"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}/message-threads'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PagePhoneMessageThreadProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_phone_message_threads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a phone number by ID
    # Get a phone number by ID
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PhoneNumberDto]
    def get_phone_number(phone_number_id, opts = {})
      data, _status_code, _headers = get_phone_number_with_http_info(phone_number_id, opts)
      data
    end

    # Get a phone number by ID
    # Get a phone number by ID
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def get_phone_number_with_http_info(phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_phone_number ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_phone_number"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PhoneNumberDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get phone numbers
    # List phone numbers for account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_country Optional phone country
    # @option opts [Integer] :page Optional page index for list pagination (default to 0)
    # @option opts [Integer] :size Optional page size for list pagination (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @option opts [DateTime] :since Filter by created at after the given timestamp
    # @option opts [DateTime] :before Filter by created at before the given timestamp
    # @option opts [String] :search Optional search filter
    # @option opts [Array<String>] :include Optional phoneIds to include in result
    # @option opts [Boolean] :favourite Optionally filter results for favourites only (default to false)
    # @return [PagePhoneNumberProjection]
    def get_phone_numbers(opts = {})
      data, _status_code, _headers = get_phone_numbers_with_http_info(opts)
      data
    end

    # Get phone numbers
    # List phone numbers for account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_country Optional phone country
    # @option opts [Integer] :page Optional page index for list pagination
    # @option opts [Integer] :size Optional page size for list pagination
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @option opts [DateTime] :since Filter by created at after the given timestamp
    # @option opts [DateTime] :before Filter by created at before the given timestamp
    # @option opts [String] :search Optional search filter
    # @option opts [Array<String>] :include Optional phoneIds to include in result
    # @option opts [Boolean] :favourite Optionally filter results for favourites only
    # @return [Array<(PagePhoneNumberProjection, Integer, Hash)>] PagePhoneNumberProjection data, response status code and response headers
    def get_phone_numbers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_phone_numbers ...'
      end
      allowable_values = ["US", "GB", "AU", "CA", "EE", "HK", "PL", "CH", "PT", "NL", "IL", "SE"]
      if @api_client.config.client_side_validation && opts[:'phone_country'] && !allowable_values.include?(opts[:'phone_country'])
        fail ArgumentError, "invalid value for \"phone_country\", must be one of #{allowable_values}"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/phone/numbers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phoneCountry'] = opts[:'phone_country'] if !opts[:'phone_country'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?
      query_params[:'favourite'] = opts[:'favourite'] if !opts[:'favourite'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PagePhoneNumberProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_phone_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get phone plans
    # Get phone number plans
    # @param [Hash] opts the optional parameters
    # @return [Array<PhonePlanDto>]
    def get_phone_plans(opts = {})
      data, _status_code, _headers = get_phone_plans_with_http_info(opts)
      data
    end

    # Get phone plans
    # Get phone number plans
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PhonePlanDto>, Integer, Hash)>] Array<PhonePlanDto> data, response status code and response headers
    def get_phone_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_phone_plans ...'
      end
      # resource path
      local_var_path = '/phone/plans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<PhonePlanDto>' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_phone_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get phone plans availability
    # @param [Hash] opts the optional parameters
    # @return [PhonePlanAvailability]
    def get_phone_plans_availability(opts = {})
      data, _status_code, _headers = get_phone_plans_availability_with_http_info(opts)
      data
    end

    # Get phone plans availability
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhonePlanAvailability, Integer, Hash)>] PhonePlanAvailability data, response status code and response headers
    def get_phone_plans_availability_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_phone_plans_availability ...'
      end
      # resource path
      local_var_path = '/phone/plans/availability'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PhonePlanAvailability' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_phone_plans_availability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List sent TXT messages for a phone number
    # Get sent SMS messages for a phone number
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Optional page index in SMS list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @option opts [DateTime] :since Optional filter SMSs received after given date time
    # @option opts [DateTime] :before Optional filter SMSs received before given date time
    # @option opts [String] :search Optional search filter
    # @return [PageSentSmsProjection]
    def get_sent_sms_by_phone_number(phone_number_id, opts = {})
      data, _status_code, _headers = get_sent_sms_by_phone_number_with_http_info(phone_number_id, opts)
      data
    end

    # List sent TXT messages for a phone number
    # Get sent SMS messages for a phone number
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Optional page index in SMS list pagination
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @option opts [DateTime] :since Optional filter SMSs received after given date time
    # @option opts [DateTime] :before Optional filter SMSs received before given date time
    # @option opts [String] :search Optional search filter
    # @return [Array<(PageSentSmsProjection, Integer, Hash)>] PageSentSmsProjection data, response status code and response headers
    def get_sent_sms_by_phone_number_with_http_info(phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_sent_sms_by_phone_number ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_sent_sms_by_phone_number"
      end
      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling PhoneControllerApi.get_sent_sms_by_phone_number, must be smaller than or equal to 100.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}/sms-sent'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageSentSmsProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_sent_sms_by_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SMS messages for a phone number
    # Get SMS messages for a phone number
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Optional page index in SMS list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @option opts [Boolean] :unread_only Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (default to false)
    # @option opts [DateTime] :since Optional filter SMSs received after given date time
    # @option opts [DateTime] :before Optional filter SMSs received before given date time
    # @option opts [String] :search Optional search filter
    # @option opts [Boolean] :favourite Optionally filter results for favourites only (default to false)
    # @return [PageSmsProjection]
    def get_sms_by_phone_number(phone_number_id, opts = {})
      data, _status_code, _headers = get_sms_by_phone_number_with_http_info(phone_number_id, opts)
      data
    end

    # List SMS messages for a phone number
    # Get SMS messages for a phone number
    # @param phone_number_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Optional page index in SMS list pagination
    # @option opts [Integer] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @option opts [Boolean] :unread_only Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly
    # @option opts [DateTime] :since Optional filter SMSs received after given date time
    # @option opts [DateTime] :before Optional filter SMSs received before given date time
    # @option opts [String] :search Optional search filter
    # @option opts [Boolean] :favourite Optionally filter results for favourites only
    # @return [Array<(PageSmsProjection, Integer, Hash)>] PageSmsProjection data, response status code and response headers
    def get_sms_by_phone_number_with_http_info(phone_number_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.get_sms_by_phone_number ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_sms_by_phone_number"
      end
      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling PhoneControllerApi.get_sms_by_phone_number, must be smaller than or equal to 100.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}/sms'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'unreadOnly'] = opts[:'unread_only'] if !opts[:'unread_only'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'favourite'] = opts[:'favourite'] if !opts[:'favourite'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageSmsProjection' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#get_sms_by_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send TXT message from a phone number
    # Send SMS from a phone number
    # @param phone_number_id [String] 
    # @param sms_send_options [SmsSendOptions] 
    # @param [Hash] opts the optional parameters
    # @return [SentSmsDto]
    def send_sms_from_phone_number(phone_number_id, sms_send_options, opts = {})
      data, _status_code, _headers = send_sms_from_phone_number_with_http_info(phone_number_id, sms_send_options, opts)
      data
    end

    # Send TXT message from a phone number
    # Send SMS from a phone number
    # @param phone_number_id [String] 
    # @param sms_send_options [SmsSendOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SentSmsDto, Integer, Hash)>] SentSmsDto data, response status code and response headers
    def send_sms_from_phone_number_with_http_info(phone_number_id, sms_send_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.send_sms_from_phone_number ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.send_sms_from_phone_number"
      end
      # verify the required parameter 'sms_send_options' is set
      if @api_client.config.client_side_validation && sms_send_options.nil?
        fail ArgumentError, "Missing the required parameter 'sms_send_options' when calling PhoneControllerApi.send_sms_from_phone_number"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}/sms'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(sms_send_options) 

      # return_type
      return_type = opts[:return_type] || 'SentSmsDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#send_sms_from_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set consent status
    # Give or revoke consent for phone usage
    # @param agree [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [ConsentStatusDto]
    def set_consent_status(agree, opts = {})
      data, _status_code, _headers = set_consent_status_with_http_info(agree, opts)
      data
    end

    # Set consent status
    # Give or revoke consent for phone usage
    # @param agree [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsentStatusDto, Integer, Hash)>] ConsentStatusDto data, response status code and response headers
    def set_consent_status_with_http_info(agree, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.set_consent_status ...'
      end
      # verify the required parameter 'agree' is set
      if @api_client.config.client_side_validation && agree.nil?
        fail ArgumentError, "Missing the required parameter 'agree' when calling PhoneControllerApi.set_consent_status"
      end
      # resource path
      local_var_path = '/phone/consent'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'agree'] = agree

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ConsentStatusDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#set_consent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set phone favourited state
    # Set and return new favorite state for a phone
    # @param phone_number_id [String] ID of phone to set favourite state
    # @param set_phone_favourited_options [SetPhoneFavouritedOptions] 
    # @param [Hash] opts the optional parameters
    # @return [PhoneNumberDto]
    def set_phone_favourited(phone_number_id, set_phone_favourited_options, opts = {})
      data, _status_code, _headers = set_phone_favourited_with_http_info(phone_number_id, set_phone_favourited_options, opts)
      data
    end

    # Set phone favourited state
    # Set and return new favorite state for a phone
    # @param phone_number_id [String] ID of phone to set favourite state
    # @param set_phone_favourited_options [SetPhoneFavouritedOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def set_phone_favourited_with_http_info(phone_number_id, set_phone_favourited_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.set_phone_favourited ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.set_phone_favourited"
      end
      # verify the required parameter 'set_phone_favourited_options' is set
      if @api_client.config.client_side_validation && set_phone_favourited_options.nil?
        fail ArgumentError, "Missing the required parameter 'set_phone_favourited_options' when calling PhoneControllerApi.set_phone_favourited"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}/favourite'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(set_phone_favourited_options) 

      # return_type
      return_type = opts[:return_type] || 'PhoneNumberDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#set_phone_favourited\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Test sending an SMS to a number
    # Test a phone number by sending an SMS to it
    # @param phone_number_id [String] 
    # @param test_phone_number_options [TestPhoneNumberOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_test_id 
    # @return [nil]
    def test_phone_number_send_sms(phone_number_id, test_phone_number_options, opts = {})
      test_phone_number_send_sms_with_http_info(phone_number_id, test_phone_number_options, opts)
      nil
    end

    # Test sending an SMS to a number
    # Test a phone number by sending an SMS to it
    # @param phone_number_id [String] 
    # @param test_phone_number_options [TestPhoneNumberOptions] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_test_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_phone_number_send_sms_with_http_info(phone_number_id, test_phone_number_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.test_phone_number_send_sms ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.test_phone_number_send_sms"
      end
      # verify the required parameter 'test_phone_number_options' is set
      if @api_client.config.client_side_validation && test_phone_number_options.nil?
        fail ArgumentError, "Missing the required parameter 'test_phone_number_options' when calling PhoneControllerApi.test_phone_number_send_sms"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}/test'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'x-test-id'] = opts[:'x_test_id'] if !opts[:'x_test_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(test_phone_number_options) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#test_phone_number_send_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a phone number
    # Set field for phone number
    # @param phone_number_id [String] ID of phone to set favourite state
    # @param update_phone_number_options [UpdatePhoneNumberOptions] 
    # @param [Hash] opts the optional parameters
    # @return [PhoneNumberDto]
    def update_phone_number(phone_number_id, update_phone_number_options, opts = {})
      data, _status_code, _headers = update_phone_number_with_http_info(phone_number_id, update_phone_number_options, opts)
      data
    end

    # Update a phone number
    # Set field for phone number
    # @param phone_number_id [String] ID of phone to set favourite state
    # @param update_phone_number_options [UpdatePhoneNumberOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def update_phone_number_with_http_info(phone_number_id, update_phone_number_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.update_phone_number ...'
      end
      # verify the required parameter 'phone_number_id' is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.update_phone_number"
      end
      # verify the required parameter 'update_phone_number_options' is set
      if @api_client.config.client_side_validation && update_phone_number_options.nil?
        fail ArgumentError, "Missing the required parameter 'update_phone_number_options' when calling PhoneControllerApi.update_phone_number"
      end
      # resource path
      local_var_path = '/phone/numbers/{phoneNumberId}'.sub('{' + 'phoneNumberId' + '}', CGI.escape(phone_number_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(update_phone_number_options) 

      # return_type
      return_type = opts[:return_type] || 'PhoneNumberDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#update_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify validity of a phone number
    # Validate a phone number
    # @param validate_phone_number_options [ValidatePhoneNumberOptions] 
    # @param [Hash] opts the optional parameters
    # @return [PhoneNumberValidationDto]
    def validate_phone_number(validate_phone_number_options, opts = {})
      data, _status_code, _headers = validate_phone_number_with_http_info(validate_phone_number_options, opts)
      data
    end

    # Verify validity of a phone number
    # Validate a phone number
    # @param validate_phone_number_options [ValidatePhoneNumberOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneNumberValidationDto, Integer, Hash)>] PhoneNumberValidationDto data, response status code and response headers
    def validate_phone_number_with_http_info(validate_phone_number_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PhoneControllerApi.validate_phone_number ...'
      end
      # verify the required parameter 'validate_phone_number_options' is set
      if @api_client.config.client_side_validation && validate_phone_number_options.nil?
        fail ArgumentError, "Missing the required parameter 'validate_phone_number_options' when calling PhoneControllerApi.validate_phone_number"
      end
      # resource path
      local_var_path = '/phone/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(validate_phone_number_options) 

      # return_type
      return_type = opts[:return_type] || 'PhoneNumberValidationDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PhoneControllerApi#validate_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
