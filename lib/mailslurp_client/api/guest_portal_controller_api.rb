=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module MailSlurpClient
  class GuestPortalControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a portal page for your customers or clients to log into email accounts and view emails.
    # Create a guest login page for customers or clients to access assigned email addresses
    # @param create_portal_options [CreatePortalOptions] 
    # @param [Hash] opts the optional parameters
    # @return [GuestPortalDto]
    def create_guest_portal(create_portal_options, opts = {})
      data, _status_code, _headers = create_guest_portal_with_http_info(create_portal_options, opts)
      data
    end

    # Create a portal page for your customers or clients to log into email accounts and view emails.
    # Create a guest login page for customers or clients to access assigned email addresses
    # @param create_portal_options [CreatePortalOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GuestPortalDto, Integer, Hash)>] GuestPortalDto data, response status code and response headers
    def create_guest_portal_with_http_info(create_portal_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuestPortalControllerApi.create_guest_portal ...'
      end
      # verify the required parameter 'create_portal_options' is set
      if @api_client.config.client_side_validation && create_portal_options.nil?
        fail ArgumentError, "Missing the required parameter 'create_portal_options' when calling GuestPortalControllerApi.create_guest_portal"
      end
      # resource path
      local_var_path = '/guest-portal'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_portal_options) 

      # return_type
      return_type = opts[:return_type] || 'GuestPortalDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuestPortalControllerApi#create_guest_portal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a portal guest user
    # Add customer to portal
    # @param portal_id [String] 
    # @param create_portal_user_options [CreatePortalUserOptions] 
    # @param [Hash] opts the optional parameters
    # @return [GuestPortalUserCreateDto]
    def create_guest_portal_user(portal_id, create_portal_user_options, opts = {})
      data, _status_code, _headers = create_guest_portal_user_with_http_info(portal_id, create_portal_user_options, opts)
      data
    end

    # Create a portal guest user
    # Add customer to portal
    # @param portal_id [String] 
    # @param create_portal_user_options [CreatePortalUserOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GuestPortalUserCreateDto, Integer, Hash)>] GuestPortalUserCreateDto data, response status code and response headers
    def create_guest_portal_user_with_http_info(portal_id, create_portal_user_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuestPortalControllerApi.create_guest_portal_user ...'
      end
      # verify the required parameter 'portal_id' is set
      if @api_client.config.client_side_validation && portal_id.nil?
        fail ArgumentError, "Missing the required parameter 'portal_id' when calling GuestPortalControllerApi.create_guest_portal_user"
      end
      # verify the required parameter 'create_portal_user_options' is set
      if @api_client.config.client_side_validation && create_portal_user_options.nil?
        fail ArgumentError, "Missing the required parameter 'create_portal_user_options' when calling GuestPortalControllerApi.create_guest_portal_user"
      end
      # resource path
      local_var_path = '/guest-portal/{portalId}/user'.sub('{' + 'portalId' + '}', CGI.escape(portal_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_portal_user_options) 

      # return_type
      return_type = opts[:return_type] || 'GuestPortalUserCreateDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuestPortalControllerApi#create_guest_portal_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all guest users for portal
    # Get all customers for a portal
    # @param [Hash] opts the optional parameters
    # @option opts [String] :portal_id Optional portal ID
    # @option opts [String] :search Optional search term
    # @option opts [Integer] :page Optional page index in list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in list pagination (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @option opts [DateTime] :since Filter by created at after the given timestamp
    # @option opts [DateTime] :before Filter by created at before the given timestamp
    # @return [PageGuestPortalUsers]
    def get_all_guest_portal_users(opts = {})
      data, _status_code, _headers = get_all_guest_portal_users_with_http_info(opts)
      data
    end

    # Get all guest users for portal
    # Get all customers for a portal
    # @param [Hash] opts the optional parameters
    # @option opts [String] :portal_id Optional portal ID
    # @option opts [String] :search Optional search term
    # @option opts [Integer] :page Optional page index in list pagination
    # @option opts [Integer] :size Optional page size in list pagination
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @option opts [DateTime] :since Filter by created at after the given timestamp
    # @option opts [DateTime] :before Filter by created at before the given timestamp
    # @return [Array<(PageGuestPortalUsers, Integer, Hash)>] PageGuestPortalUsers data, response status code and response headers
    def get_all_guest_portal_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuestPortalControllerApi.get_all_guest_portal_users ...'
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/guest-portal/user'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'portalId'] = opts[:'portal_id'] if !opts[:'portal_id'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageGuestPortalUsers' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuestPortalControllerApi#get_all_guest_portal_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a client email portal
    # Fetch a customer guest portal
    # @param portal_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GuestPortalDto]
    def get_guest_portal(portal_id, opts = {})
      data, _status_code, _headers = get_guest_portal_with_http_info(portal_id, opts)
      data
    end

    # Get a client email portal
    # Fetch a customer guest portal
    # @param portal_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GuestPortalDto, Integer, Hash)>] GuestPortalDto data, response status code and response headers
    def get_guest_portal_with_http_info(portal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuestPortalControllerApi.get_guest_portal ...'
      end
      # verify the required parameter 'portal_id' is set
      if @api_client.config.client_side_validation && portal_id.nil?
        fail ArgumentError, "Missing the required parameter 'portal_id' when calling GuestPortalControllerApi.get_guest_portal"
      end
      # resource path
      local_var_path = '/guest-portal/{portalId}'.sub('{' + 'portalId' + '}', CGI.escape(portal_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GuestPortalDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuestPortalControllerApi#get_guest_portal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get guest user for portal
    # Get customer for portal
    # @param portal_id [String] 
    # @param guest_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GuestPortalUserDto]
    def get_guest_portal_user(portal_id, guest_id, opts = {})
      data, _status_code, _headers = get_guest_portal_user_with_http_info(portal_id, guest_id, opts)
      data
    end

    # Get guest user for portal
    # Get customer for portal
    # @param portal_id [String] 
    # @param guest_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GuestPortalUserDto, Integer, Hash)>] GuestPortalUserDto data, response status code and response headers
    def get_guest_portal_user_with_http_info(portal_id, guest_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuestPortalControllerApi.get_guest_portal_user ...'
      end
      # verify the required parameter 'portal_id' is set
      if @api_client.config.client_side_validation && portal_id.nil?
        fail ArgumentError, "Missing the required parameter 'portal_id' when calling GuestPortalControllerApi.get_guest_portal_user"
      end
      # verify the required parameter 'guest_id' is set
      if @api_client.config.client_side_validation && guest_id.nil?
        fail ArgumentError, "Missing the required parameter 'guest_id' when calling GuestPortalControllerApi.get_guest_portal_user"
      end
      # resource path
      local_var_path = '/guest-portal/{portalId}/user/{guestId}'.sub('{' + 'portalId' + '}', CGI.escape(portal_id.to_s)).sub('{' + 'guestId' + '}', CGI.escape(guest_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GuestPortalUserDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuestPortalControllerApi#get_guest_portal_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get guest user
    # Get customer by ID
    # @param guest_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GuestPortalUserDto]
    def get_guest_portal_user_by_id(guest_id, opts = {})
      data, _status_code, _headers = get_guest_portal_user_by_id_with_http_info(guest_id, opts)
      data
    end

    # Get guest user
    # Get customer by ID
    # @param guest_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GuestPortalUserDto, Integer, Hash)>] GuestPortalUserDto data, response status code and response headers
    def get_guest_portal_user_by_id_with_http_info(guest_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuestPortalControllerApi.get_guest_portal_user_by_id ...'
      end
      # verify the required parameter 'guest_id' is set
      if @api_client.config.client_side_validation && guest_id.nil?
        fail ArgumentError, "Missing the required parameter 'guest_id' when calling GuestPortalControllerApi.get_guest_portal_user_by_id"
      end
      # resource path
      local_var_path = '/guest-portal/user/{guestId}'.sub('{' + 'guestId' + '}', CGI.escape(guest_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GuestPortalUserDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuestPortalControllerApi#get_guest_portal_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all guest users for portal
    # Get customers for a portal
    # @param portal_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Optional search term
    # @option opts [Integer] :page Optional page index in list pagination (default to 0)
    # @option opts [Integer] :size Optional page size in list pagination (default to 20)
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC (default to 'ASC')
    # @option opts [DateTime] :since Filter by created at after the given timestamp
    # @option opts [DateTime] :before Filter by created at before the given timestamp
    # @return [PageGuestPortalUsers]
    def get_guest_portal_users(portal_id, opts = {})
      data, _status_code, _headers = get_guest_portal_users_with_http_info(portal_id, opts)
      data
    end

    # Get all guest users for portal
    # Get customers for a portal
    # @param portal_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Optional search term
    # @option opts [Integer] :page Optional page index in list pagination
    # @option opts [Integer] :size Optional page size in list pagination
    # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
    # @option opts [DateTime] :since Filter by created at after the given timestamp
    # @option opts [DateTime] :before Filter by created at before the given timestamp
    # @return [Array<(PageGuestPortalUsers, Integer, Hash)>] PageGuestPortalUsers data, response status code and response headers
    def get_guest_portal_users_with_http_info(portal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuestPortalControllerApi.get_guest_portal_users ...'
      end
      # verify the required parameter 'portal_id' is set
      if @api_client.config.client_side_validation && portal_id.nil?
        fail ArgumentError, "Missing the required parameter 'portal_id' when calling GuestPortalControllerApi.get_guest_portal_users"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/guest-portal/{portalId}/user'.sub('{' + 'portalId' + '}', CGI.escape(portal_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PageGuestPortalUsers' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuestPortalControllerApi#get_guest_portal_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get guest portals
    # Get portals
    # @param [Hash] opts the optional parameters
    # @return [Array<GuestPortalDto>]
    def get_guest_portals(opts = {})
      data, _status_code, _headers = get_guest_portals_with_http_info(opts)
      data
    end

    # Get guest portals
    # Get portals
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GuestPortalDto>, Integer, Hash)>] Array<GuestPortalDto> data, response status code and response headers
    def get_guest_portals_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GuestPortalControllerApi.get_guest_portals ...'
      end
      # resource path
      local_var_path = '/guest-portal'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<GuestPortalDto>' 

      # auth_names
      auth_names = opts[:auth_names] || ['API_KEY']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GuestPortalControllerApi#get_guest_portals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
