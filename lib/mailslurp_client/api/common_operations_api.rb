=begin
#MailSlurp API

#For documentation see [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/).

OpenAPI spec version: 0.0.1-alpha
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module MailSlurpClient
  class CommonOperationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create new email address
    # Returns an Inbox with an `id` and an `emailAddress`
    # @param [Hash] opts the optional parameters
    # @return [Inbox]
    def create_new_email_address(opts = {})
      data, _status_code, _headers = create_new_email_address_with_http_info(opts)
      data
    end

    # Create new email address
    # Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Inbox, Fixnum, Hash)>] Inbox data, response status code and response headers
    def create_new_email_address_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommonOperationsApi.create_new_email_address ...'
      end
      # resource path
      local_var_path = '/newEmailAddress'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API_KEY']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Inbox')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommonOperationsApi#create_new_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete email address and its emails
    # Deletes an inbox
    # @param inbox_id inboxId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_email_address(inbox_id, opts = {})
      delete_email_address_with_http_info(inbox_id, opts)
      nil
    end

    # Delete email address and its emails
    # Deletes an inbox
    # @param inbox_id inboxId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_email_address_with_http_info(inbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommonOperationsApi.delete_email_address ...'
      end
      # verify the required parameter 'inbox_id' is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbox_id' when calling CommonOperationsApi.delete_email_address"
      end
      # resource path
      local_var_path = '/deleteEmailAddress'

      # query parameters
      query_params = {}
      query_params[:'inboxId'] = inbox_id

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API_KEY']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommonOperationsApi#delete_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send an email from a random email address
    # To specify an email address first create an inbox and use that with the other send email methods
    # @param send_email_options sendEmailOptions
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_email_simple(send_email_options, opts = {})
      send_email_simple_with_http_info(send_email_options, opts)
      nil
    end

    # Send an email from a random email address
    # To specify an email address first create an inbox and use that with the other send email methods
    # @param send_email_options sendEmailOptions
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def send_email_simple_with_http_info(send_email_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommonOperationsApi.send_email_simple ...'
      end
      # verify the required parameter 'send_email_options' is set
      if @api_client.config.client_side_validation && send_email_options.nil?
        fail ArgumentError, "Missing the required parameter 'send_email_options' when calling CommonOperationsApi.send_email_simple"
      end
      # resource path
      local_var_path = '/sendEmail'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(send_email_options)
      auth_names = ['API_KEY']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommonOperationsApi#send_email_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch inbox's latest email or if empty wait for email to arrive
    # Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_email_address Email address of the inbox we are fetching emails from
    # @option opts [String] :inbox_id Id of the inbox we are fetching emails from
    # @return [Email]
    def wait_for_latest_email(opts = {})
      data, _status_code, _headers = wait_for_latest_email_with_http_info(opts)
      data
    end

    # Fetch inbox&#39;s latest email or if empty wait for email to arrive
    # Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_email_address Email address of the inbox we are fetching emails from
    # @option opts [String] :inbox_id Id of the inbox we are fetching emails from
    # @return [Array<(Email, Fixnum, Hash)>] Email data, response status code and response headers
    def wait_for_latest_email_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommonOperationsApi.wait_for_latest_email ...'
      end
      # resource path
      local_var_path = '/fetchLatestEmail'

      # query parameters
      query_params = {}
      query_params[:'inboxEmailAddress'] = opts[:'inbox_email_address'] if !opts[:'inbox_email_address'].nil?
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API_KEY']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Email')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommonOperationsApi#wait_for_latest_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Wait for or fetch the email with a given index in the inbox specified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Id of the inbox we are fetching emails from
    # @option opts [Integer] :index Zero based index of the email to wait for
    # @return [Email]
    def wait_for_nth_email(opts = {})
      data, _status_code, _headers = wait_for_nth_email_with_http_info(opts)
      data
    end

    # Wait for or fetch the email with a given index in the inbox specified
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inbox_id Id of the inbox we are fetching emails from
    # @option opts [Integer] :index Zero based index of the email to wait for
    # @return [Array<(Email, Fixnum, Hash)>] Email data, response status code and response headers
    def wait_for_nth_email_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommonOperationsApi.wait_for_nth_email ...'
      end
      # resource path
      local_var_path = '/waitForNthEmail'

      # query parameters
      query_params = {}
      query_params[:'inboxId'] = opts[:'inbox_id'] if !opts[:'inbox_id'].nil?
      query_params[:'index'] = opts[:'index'] if !opts[:'index'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['API_KEY']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Email')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommonOperationsApi#wait_for_nth_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
