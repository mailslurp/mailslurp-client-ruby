=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module MailSlurpClient
  class GenerateDmarcRecordOptions
    attr_accessor :domain

    attr_accessor :version

    attr_accessor :policy

    attr_accessor :subdomain_policy

    attr_accessor :report_email_address

    attr_accessor :forensic_email_address

    attr_accessor :percentage

    attr_accessor :report_format

    attr_accessor :seconds_between_reports

    attr_accessor :adkim

    attr_accessor :aspf

    attr_accessor :fo

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'domain' => :'domain',
        :'version' => :'version',
        :'policy' => :'policy',
        :'subdomain_policy' => :'subdomainPolicy',
        :'report_email_address' => :'reportEmailAddress',
        :'forensic_email_address' => :'forensicEmailAddress',
        :'percentage' => :'percentage',
        :'report_format' => :'reportFormat',
        :'seconds_between_reports' => :'secondsBetweenReports',
        :'adkim' => :'adkim',
        :'aspf' => :'aspf',
        :'fo' => :'fo'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'domain' => :'String',
        :'version' => :'String',
        :'policy' => :'String',
        :'subdomain_policy' => :'String',
        :'report_email_address' => :'Array<String>',
        :'forensic_email_address' => :'Array<String>',
        :'percentage' => :'Integer',
        :'report_format' => :'String',
        :'seconds_between_reports' => :'Integer',
        :'adkim' => :'String',
        :'aspf' => :'String',
        :'fo' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MailSlurpClient::GenerateDmarcRecordOptions` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MailSlurpClient::GenerateDmarcRecordOptions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'policy')
        self.policy = attributes[:'policy']
      end

      if attributes.key?(:'subdomain_policy')
        self.subdomain_policy = attributes[:'subdomain_policy']
      end

      if attributes.key?(:'report_email_address')
        if (value = attributes[:'report_email_address']).is_a?(Array)
          self.report_email_address = value
        end
      end

      if attributes.key?(:'forensic_email_address')
        if (value = attributes[:'forensic_email_address']).is_a?(Array)
          self.forensic_email_address = value
        end
      end

      if attributes.key?(:'percentage')
        self.percentage = attributes[:'percentage']
      end

      if attributes.key?(:'report_format')
        self.report_format = attributes[:'report_format']
      end

      if attributes.key?(:'seconds_between_reports')
        self.seconds_between_reports = attributes[:'seconds_between_reports']
      end

      if attributes.key?(:'adkim')
        self.adkim = attributes[:'adkim']
      end

      if attributes.key?(:'aspf')
        self.aspf = attributes[:'aspf']
      end

      if attributes.key?(:'fo')
        self.fo = attributes[:'fo']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @domain.nil?
        invalid_properties.push('invalid value for "domain", domain cannot be nil.')
      end

      if @version.nil?
        invalid_properties.push('invalid value for "version", version cannot be nil.')
      end

      if @policy.nil?
        invalid_properties.push('invalid value for "policy", policy cannot be nil.')
      end

      if !@percentage.nil? && @percentage > 100
        invalid_properties.push('invalid value for "percentage", must be smaller than or equal to 100.')
      end

      if !@percentage.nil? && @percentage < 1
        invalid_properties.push('invalid value for "percentage", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @domain.nil?
      return false if @version.nil?
      version_validator = EnumAttributeValidator.new('String', ["DMARC1"])
      return false unless version_validator.valid?(@version)
      return false if @policy.nil?
      policy_validator = EnumAttributeValidator.new('String', ["NONE", "QUARANTINE", "REJECT"])
      return false unless policy_validator.valid?(@policy)
      subdomain_policy_validator = EnumAttributeValidator.new('String', ["NONE", "QUARANTINE", "REJECT"])
      return false unless subdomain_policy_validator.valid?(@subdomain_policy)
      return false if !@percentage.nil? && @percentage > 100
      return false if !@percentage.nil? && @percentage < 1
      report_format_validator = EnumAttributeValidator.new('String', ["AFRF"])
      return false unless report_format_validator.valid?(@report_format)
      adkim_validator = EnumAttributeValidator.new('String', ["STRICT", "RELAXED"])
      return false unless adkim_validator.valid?(@adkim)
      aspf_validator = EnumAttributeValidator.new('String', ["STRICT", "RELAXED"])
      return false unless aspf_validator.valid?(@aspf)
      fo_validator = EnumAttributeValidator.new('String', ["FO_0", "FO_1", "FO_D", "FO_S"])
      return false unless fo_validator.valid?(@fo)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] version Object to be assigned
    def version=(version)
      validator = EnumAttributeValidator.new('String', ["DMARC1"])
      unless validator.valid?(version)
        fail ArgumentError, "invalid value for \"version\", must be one of #{validator.allowable_values}."
      end
      @version = version
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] policy Object to be assigned
    def policy=(policy)
      validator = EnumAttributeValidator.new('String', ["NONE", "QUARANTINE", "REJECT"])
      unless validator.valid?(policy)
        fail ArgumentError, "invalid value for \"policy\", must be one of #{validator.allowable_values}."
      end
      @policy = policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subdomain_policy Object to be assigned
    def subdomain_policy=(subdomain_policy)
      validator = EnumAttributeValidator.new('String', ["NONE", "QUARANTINE", "REJECT"])
      unless validator.valid?(subdomain_policy)
        fail ArgumentError, "invalid value for \"subdomain_policy\", must be one of #{validator.allowable_values}."
      end
      @subdomain_policy = subdomain_policy
    end

    # Custom attribute writer method with validation
    # @param [Object] percentage Value to be assigned
    def percentage=(percentage)
      if !percentage.nil? && percentage > 100
        fail ArgumentError, 'invalid value for "percentage", must be smaller than or equal to 100.'
      end

      if !percentage.nil? && percentage < 1
        fail ArgumentError, 'invalid value for "percentage", must be greater than or equal to 1.'
      end

      @percentage = percentage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] report_format Object to be assigned
    def report_format=(report_format)
      validator = EnumAttributeValidator.new('String', ["AFRF"])
      unless validator.valid?(report_format)
        fail ArgumentError, "invalid value for \"report_format\", must be one of #{validator.allowable_values}."
      end
      @report_format = report_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adkim Object to be assigned
    def adkim=(adkim)
      validator = EnumAttributeValidator.new('String', ["STRICT", "RELAXED"])
      unless validator.valid?(adkim)
        fail ArgumentError, "invalid value for \"adkim\", must be one of #{validator.allowable_values}."
      end
      @adkim = adkim
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aspf Object to be assigned
    def aspf=(aspf)
      validator = EnumAttributeValidator.new('String', ["STRICT", "RELAXED"])
      unless validator.valid?(aspf)
        fail ArgumentError, "invalid value for \"aspf\", must be one of #{validator.allowable_values}."
      end
      @aspf = aspf
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fo Object to be assigned
    def fo=(fo)
      validator = EnumAttributeValidator.new('String', ["FO_0", "FO_1", "FO_D", "FO_S"])
      unless validator.valid?(fo)
        fail ArgumentError, "invalid value for \"fo\", must be one of #{validator.allowable_values}."
      end
      @fo = fo
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          domain == o.domain &&
          version == o.version &&
          policy == o.policy &&
          subdomain_policy == o.subdomain_policy &&
          report_email_address == o.report_email_address &&
          forensic_email_address == o.forensic_email_address &&
          percentage == o.percentage &&
          report_format == o.report_format &&
          seconds_between_reports == o.seconds_between_reports &&
          adkim == o.adkim &&
          aspf == o.aspf &&
          fo == o.fo
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [domain, version, policy, subdomain_policy, report_email_address, forensic_email_address, percentage, report_format, seconds_between_reports, adkim, aspf, fo].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        MailSlurpClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
