=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module MailSlurpClient
  # Representation of a webhook for an inbox. The URL specified will be using by MailSlurp whenever an email is received by the attached inbox. A webhook entity should have a URL that points to your server. Your server should accept HTTP/S POST requests and return a success 200. MailSlurp will retry your webhooks if they fail. See https://ruby.api.mailslurp.com/schemas/webhook-payload for the payload schema.
  class WebhookDto
    # ID of the Webhook
    attr_accessor :id

    # User ID of the Webhook
    attr_accessor :user_id

    # Does webhook expect basic authentication? If true it means you created this webhook with a username and password. MailSlurp will use these in the URL to authenticate itself.
    attr_accessor :basic_auth

    # Name of the webhook
    attr_accessor :name

    # The phoneNumberId that the Webhook will be triggered by. If null then webhook triggered at account level or inbox level if inboxId set
    attr_accessor :phone_id

    # The inbox that the Webhook will be triggered by. If null then webhook triggered at account level or phone level if phoneId set
    attr_accessor :inbox_id

    # Request body template for HTTP request that will be sent for the webhook. Use Moustache style template variables to insert values from the original event payload.
    attr_accessor :request_body_template

    # URL of your server that the webhook will be sent to. The schema of the JSON that is sent is described by the payloadJsonSchema.
    attr_accessor :url

    # HTTP method that your server endpoint must listen for
    attr_accessor :method

    # Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload method
    attr_accessor :payload_json_schema

    # When the webhook was created
    attr_accessor :created_at

    attr_accessor :updated_at

    # Webhook trigger event name
    attr_accessor :event_name

    attr_accessor :request_headers

    # ID of AI transformer for payload
    attr_accessor :ai_transform_id

    # Should notifier ignore insecure SSL certificates
    attr_accessor :ignore_insecure_ssl_certificates

    # Should notifier use static IP range when sending webhook payload
    attr_accessor :use_static_ip_range

    # Webhook health
    attr_accessor :health_status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'user_id' => :'userId',
        :'basic_auth' => :'basicAuth',
        :'name' => :'name',
        :'phone_id' => :'phoneId',
        :'inbox_id' => :'inboxId',
        :'request_body_template' => :'requestBodyTemplate',
        :'url' => :'url',
        :'method' => :'method',
        :'payload_json_schema' => :'payloadJsonSchema',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'event_name' => :'eventName',
        :'request_headers' => :'requestHeaders',
        :'ai_transform_id' => :'aiTransformId',
        :'ignore_insecure_ssl_certificates' => :'ignoreInsecureSslCertificates',
        :'use_static_ip_range' => :'useStaticIpRange',
        :'health_status' => :'healthStatus'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'user_id' => :'String',
        :'basic_auth' => :'Boolean',
        :'name' => :'String',
        :'phone_id' => :'String',
        :'inbox_id' => :'String',
        :'request_body_template' => :'String',
        :'url' => :'String',
        :'method' => :'String',
        :'payload_json_schema' => :'String',
        :'created_at' => :'DateTime',
        :'updated_at' => :'DateTime',
        :'event_name' => :'String',
        :'request_headers' => :'WebhookHeaders',
        :'ai_transform_id' => :'String',
        :'ignore_insecure_ssl_certificates' => :'Boolean',
        :'use_static_ip_range' => :'Boolean',
        :'health_status' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name',
        :'phone_id',
        :'inbox_id',
        :'request_body_template',
        :'created_at',
        :'event_name',
        :'ai_transform_id',
        :'ignore_insecure_ssl_certificates',
        :'use_static_ip_range',
        :'health_status'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MailSlurpClient::WebhookDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MailSlurpClient::WebhookDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'basic_auth')
        self.basic_auth = attributes[:'basic_auth']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'phone_id')
        self.phone_id = attributes[:'phone_id']
      end

      if attributes.key?(:'inbox_id')
        self.inbox_id = attributes[:'inbox_id']
      end

      if attributes.key?(:'request_body_template')
        self.request_body_template = attributes[:'request_body_template']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'method')
        self.method = attributes[:'method']
      end

      if attributes.key?(:'payload_json_schema')
        self.payload_json_schema = attributes[:'payload_json_schema']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'event_name')
        self.event_name = attributes[:'event_name']
      end

      if attributes.key?(:'request_headers')
        self.request_headers = attributes[:'request_headers']
      end

      if attributes.key?(:'ai_transform_id')
        self.ai_transform_id = attributes[:'ai_transform_id']
      end

      if attributes.key?(:'ignore_insecure_ssl_certificates')
        self.ignore_insecure_ssl_certificates = attributes[:'ignore_insecure_ssl_certificates']
      end

      if attributes.key?(:'use_static_ip_range')
        self.use_static_ip_range = attributes[:'use_static_ip_range']
      end

      if attributes.key?(:'health_status')
        self.health_status = attributes[:'health_status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @basic_auth.nil?
        invalid_properties.push('invalid value for "basic_auth", basic_auth cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @method.nil?
        invalid_properties.push('invalid value for "method", method cannot be nil.')
      end

      if @payload_json_schema.nil?
        invalid_properties.push('invalid value for "payload_json_schema", payload_json_schema cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @user_id.nil?
      return false if @basic_auth.nil?
      return false if @url.nil?
      return false if @method.nil?
      method_validator = EnumAttributeValidator.new('String', ["POST", "DELETE", "GET", "PUT", "PATCH", "HEAD", "OPTIONS", "TRACE"])
      return false unless method_validator.valid?(@method)
      return false if @payload_json_schema.nil?
      return false if @updated_at.nil?
      event_name_validator = EnumAttributeValidator.new('String', ["EMAIL_RECEIVED", "NEW_EMAIL", "NEW_CONTACT", "NEW_ATTACHMENT", "EMAIL_OPENED", "EMAIL_READ", "DELIVERY_STATUS", "BOUNCE", "BOUNCE_RECIPIENT", "NEW_SMS", "NEW_GUEST_USER"])
      return false unless event_name_validator.valid?(@event_name)
      health_status_validator = EnumAttributeValidator.new('String', ["HEALTHY", "UNHEALTHY"])
      return false unless health_status_validator.valid?(@health_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] method Object to be assigned
    def method=(method)
      validator = EnumAttributeValidator.new('String', ["POST", "DELETE", "GET", "PUT", "PATCH", "HEAD", "OPTIONS", "TRACE"])
      unless validator.valid?(method)
        fail ArgumentError, "invalid value for \"method\", must be one of #{validator.allowable_values}."
      end
      @method = method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_name Object to be assigned
    def event_name=(event_name)
      validator = EnumAttributeValidator.new('String', ["EMAIL_RECEIVED", "NEW_EMAIL", "NEW_CONTACT", "NEW_ATTACHMENT", "EMAIL_OPENED", "EMAIL_READ", "DELIVERY_STATUS", "BOUNCE", "BOUNCE_RECIPIENT", "NEW_SMS", "NEW_GUEST_USER"])
      unless validator.valid?(event_name)
        fail ArgumentError, "invalid value for \"event_name\", must be one of #{validator.allowable_values}."
      end
      @event_name = event_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] health_status Object to be assigned
    def health_status=(health_status)
      validator = EnumAttributeValidator.new('String', ["HEALTHY", "UNHEALTHY"])
      unless validator.valid?(health_status)
        fail ArgumentError, "invalid value for \"health_status\", must be one of #{validator.allowable_values}."
      end
      @health_status = health_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          user_id == o.user_id &&
          basic_auth == o.basic_auth &&
          name == o.name &&
          phone_id == o.phone_id &&
          inbox_id == o.inbox_id &&
          request_body_template == o.request_body_template &&
          url == o.url &&
          method == o.method &&
          payload_json_schema == o.payload_json_schema &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          event_name == o.event_name &&
          request_headers == o.request_headers &&
          ai_transform_id == o.ai_transform_id &&
          ignore_insecure_ssl_certificates == o.ignore_insecure_ssl_certificates &&
          use_static_ip_range == o.use_static_ip_range &&
          health_status == o.health_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, user_id, basic_auth, name, phone_id, inbox_id, request_body_template, url, method, payload_json_schema, created_at, updated_at, event_name, request_headers, ai_transform_id, ignore_insecure_ssl_certificates, use_static_ip_range, health_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        MailSlurpClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
