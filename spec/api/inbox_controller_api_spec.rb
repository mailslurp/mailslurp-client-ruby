=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for MailSlurpClient::InboxControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'InboxControllerApi' do
  before do
    # run before each test
    @api_instance = MailSlurpClient::InboxControllerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of InboxControllerApi' do
    it 'should create an instance of InboxControllerApi' do
      expect(@api_instance).to be_instance_of(MailSlurpClient::InboxControllerApi)
    end
  end

  # unit tests for create_inbox
  # Create an Inbox (email address)
  # Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description Optional description for an inbox.
  # @option opts [String] :email_address Optional email address including domain you wish inbox to use (eg: test123@mydomain.com). Only supports domains that you have registered and verified with MailSlurp using dashboard or &#x60;createDomain&#x60; method.
  # @option opts [DateTime] :expires_at Optional expires at timestamp. If your plan supports this feature you can specify when an inbox should expire. If left empty inbox will exist permanently or expire when your plan dictates
  # @option opts [Boolean] :favourite Is inbox favourited.
  # @option opts [String] :name Optional name for an inbox.
  # @option opts [Array<String>] :tags Optional tags for an inbox. Can be used for searching and filtering inboxes.
  # @return [Inbox]
  describe 'create_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_all_inboxes
  # Delete all inboxes
  # Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_all_inboxes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_inbox
  # Delete inbox
  # Permanently delete an inbox and associated email address aswell as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
  # @param inbox_id inboxId
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_inboxes
  # List Inboxes Paginated
  # List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :favourite Optionally filter results for favourites only
  # @option opts [Integer] :page Optional page index in inbox list pagination
  # @option opts [String] :search Optionally filter by search words partial matching ID, tags, name, and email address
  # @option opts [Integer] :size Optional page size in inbox list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :tag Optionally filter by tags
  # @return [PageInboxProjection]
  describe 'get_all_inboxes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_emails
  # Get emails in an Inbox
  # List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
  # @param inbox_id Id of inbox that emails belongs to
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Limit the result set, ordered by received date time sort direction
  # @option opts [Integer] :min_count Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.
  # @option opts [Integer] :retry_timeout Maximum milliseconds to spend retrying inbox database until minCount emails are returned
  # @option opts [DateTime] :since Exclude emails received before this ISO 8601 date time
  # @option opts [String] :sort Sort the results by received date and direction ASC or DESC
  # @return [Array<EmailPreview>]
  describe 'get_emails test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbox
  # Get Inbox
  # Returns an inbox&#39;s properties, including its email address and ID.
  # @param inbox_id inboxId
  # @param [Hash] opts the optional parameters
  # @return [Inbox]
  describe 'get_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbox_emails_paginated
  # Get inbox emails paginated
  # Get a paginated list of emails in an inbox. Does not hold connections open.
  # @param inbox_id Id of inbox that emails belongs to
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Optional page index in inbox emails list pagination
  # @option opts [Integer] :size Optional page size in inbox emails list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @return [PageEmailPreview]
  describe 'get_inbox_emails_paginated test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbox_sent_emails
  # Get Inbox Sent Emails
  # Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
  # @param inbox_id inboxId
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Optional page index in inbox sent email list pagination
  # @option opts [Integer] :size Optional page size in inbox sent email list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @return [PageSentEmailProjection]
  describe 'get_inbox_sent_emails test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbox_tags
  # Get inbox tags
  # Get all inbox tags
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_inbox_tags test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inboxes
  # List Inboxes / Email Addresses
  # List the inboxes you have created
  # @param [Hash] opts the optional parameters
  # @return [Array<Inbox>]
  describe 'get_inboxes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_email
  # Send Email
  # Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
  # @param inbox_id ID of the inbox you want to send the email from
  # @param [Hash] opts the optional parameters
  # @option opts [SendEmailOptions] :send_email_options Options for the email
  # @return [nil]
  describe 'send_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_email_and_confirm
  # Send email and return sent confirmation
  # Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with link the the sent object created for it.
  # @param inbox_id ID of the inbox you want to send the email from
  # @param [Hash] opts the optional parameters
  # @option opts [SendEmailOptions] :send_email_options Options for the email
  # @return [SentEmail]
  describe 'send_email_and_confirm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_inbox_favourited
  # Set inbox favourited state
  # Set and return new favourite state for an inbox
  # @param inbox_id inboxId
  # @param set_inbox_favourited_options setInboxFavouritedOptions
  # @param [Hash] opts the optional parameters
  # @return [Inbox]
  describe 'set_inbox_favourited test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_inbox
  # Update Inbox
  # Update editable fields on an inbox
  # @param inbox_id inboxId
  # @param update_inbox_options updateInboxOptions
  # @param [Hash] opts the optional parameters
  # @return [Inbox]
  describe 'update_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
