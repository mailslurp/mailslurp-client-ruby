=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Overview  #### Inboxes  Inboxes have real email addresses that can send and receive emails. You can create inboxes with specific email addresses (using custom domains). You can also use randomly assigned MailSlurp addresses as unique, disposable test addresses.   See the InboxController or [inbox and email address guide](https://www.mailslurp.com/guides/) for more information.  #### Receive Emails You can receive emails in a number of ways. You can fetch emails and attachments directly from an inbox. Or you can use `waitFor` endpoints to hold a connection open until an email is received that matches given criteria (such as subject or body content). You can also use webhooks to have emails from multiple inboxes forwarded to your server via HTTP POST.  InboxController methods with `waitFor` in the name have a long timeout period and instruct MailSlurp to wait until an expected email is received. You can set conditions on email counts, subject or body matches, and more.  Most receive methods only return an email ID and not the full email (to keep response sizes low). To fetch the full body or attachments for an email use the email's ID with EmailController endpoints.  See the InboxController or [receiving emails guide](https://www.mailslurp.com/guides/) for more information.  #### Send Emails You can send templated HTML emails in several ways. You must first create an inbox to send an email. An inbox can have a specific address or a randomly assigned one. You can send emails from an inbox using `to`, `cc`, and `bcc` recipient lists or with contacts and contact groups.   Emails can contain plain-text or HTML bodies. You can also use email templates that support [moustache](https://mustache.github.io/) template variables. You can send attachments by first posting files to the AttachmentController and then using the returned IDs in the `attachments` field of the send options.  See the InboxController or [sending emails guide](https://www.mailslurp.com/guides/) for more information.  ## Templates MailSlurp emails support templates. You can create templates in the dashboard or API that contain [moustache](https://mustache.github.io/) style variables: for instance `Hello {{name}}`. Then when sending emails you can pass a map of variables names and values to be used. Additionally, when sending emails with contact groups you can use properties of the contact in your templates like `{{firstName}}` and `{{lastName}}``.  ## Explore     

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for MailSlurpClient::EmailControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'EmailControllerApi' do
  before do
    # run before each test
    @api_instance = MailSlurpClient::EmailControllerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of EmailControllerApi' do
    it 'should create an instance of EmailControllerApi' do
      expect(@api_instance).to be_instance_of(MailSlurpClient::EmailControllerApi)
    end
  end

  # unit tests for delete_all_emails
  # Delete all emails
  # Deletes all emails
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_all_emails test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_email
  # Delete Email
  # Deletes an email and removes it from the inbox
  # @param email_id emailId
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_attachment
  # Get email attachment
  # Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response.
  # @param attachment_id attachmentId
  # @param email_id emailId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :api_key Can pass apiKey in url for this request if you wish to download the file in a browser
  # @return [String]
  describe 'download_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for forward_email
  # Forward Email
  # Forward email content to given recipients
  # @param email_id emailId
  # @param forward_email_options forwardEmailOptions
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'forward_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_attachment_meta_data
  # Get email attachment metadata
  # Returns the metadata such as name and content-type for a given attachment and email.
  # @param attachment_id attachmentId
  # @param email_id emailId
  # @param [Hash] opts the optional parameters
  # @return [AttachmentMetaData]
  describe 'get_attachment_meta_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_attachments
  # Get all email attachment metadata
  # Returns an array of attachment metadata such as name and content-type for a given email if present.
  # @param email_id emailId
  # @param [Hash] opts the optional parameters
  # @return [Array<AttachmentMetaData>]
  describe 'get_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_email
  # Get Email Content
  # Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
  # @param email_id emailId
  # @param [Hash] opts the optional parameters
  # @return [Email]
  describe 'get_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_emails_paginated
  # Get all emails
  # Responses are paginated
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :inbox_id Optional inbox ids to filter by. Can be repeated
  # @option opts [Integer] :page Optional page index in email list pagination
  # @option opts [Integer] :size Optional page size in email list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Boolean] :unread_only Optional filter for unread emails only
  # @return [PageEmailProjection]
  describe 'get_emails_paginated test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_raw_email_contents
  # Get Raw Email Content
  # Returns a raw, unparsed and unprocessed email
  # @param email_id emailId
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_raw_email_contents test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_email
  # Validate email
  # Validate HTML content of email
  # @param email_id emailId
  # @param [Hash] opts the optional parameters
  # @return [ValidationDto]
  describe 'validate_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
