=begin
#MailSlurp API

### Introduction  [MailSlurp](https://www.mailslurp.com) is an Email API for developers and QA testers. It let's users: - create emails addresses on demand - receive emails and attachments in code - send templated HTML emails  ## About  This page contains the REST API documentation for MailSlurp. All requests require API Key authentication passed as an `x-api-key` header.  Create an account to [get your free API Key](https://app.mailslurp.com/sign-up/).  ## Resources - üîë [Get API Key](https://app.mailslurp.com/sign-up/)                    - üéì [Developer Portal](https://www.mailslurp.com/docs/)           - üì¶ [Library SDKs](https://www.mailslurp.com/docs/) - ‚úçÔ∏è [Code Examples](https://www.mailslurp.com/examples) - ‚ö†Ô∏è [Report an issue](https://drift.me/mailslurp)  ## Explore  

The version of the OpenAPI document: 6.5.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for MailSlurpClient::CommonActionsControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CommonActionsControllerApi' do
  before do
    # run before each test
    @api_instance = MailSlurpClient::CommonActionsControllerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CommonActionsControllerApi' do
    it 'should create an instance of CommonActionsControllerApi' do
      expect(@api_instance).to be_instance_of(MailSlurpClient::CommonActionsControllerApi)
    end
  end

  # unit tests for create_new_email_address
  # Create new random inbox
  # Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
  # @param [Hash] opts the optional parameters
  # @return [Inbox]
  describe 'create_new_email_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for empty_inbox
  # Delete all emails in an inbox
  # Deletes all emails
  # @param inbox_id inboxId
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'empty_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_email_simple
  # Send an email from a random email address
  # To specify an email address first create an inbox and use that with the other send email methods
  # @param send_email_options sendEmailOptions
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'send_email_simple test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for wait_for_email_count
  # Wait for and return count number of emails 
  # Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count Number of emails to wait for. Must be greater that 1
  # @option opts [String] :inbox_id Id of the inbox we are fetching emails from
  # @option opts [Integer] :timeout Max milliseconds to wait
  # @option opts [Boolean] :unread_only Optional filter for unread only
  # @return [Array<EmailPreview>]
  describe 'wait_for_email_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for wait_for_latest_email
  # Fetch inbox&#39;s latest email or if empty wait for email to arrive
  # Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Id of the inbox we are fetching emails from
  # @option opts [Integer] :timeout Max milliseconds to wait
  # @option opts [Boolean] :unread_only Optional filter for unread only
  # @return [Email]
  describe 'wait_for_latest_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for wait_for_matching_email
  # Wait or return list of emails that match simple matching patterns
  # Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
  # @param match_options matchOptions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count Number of emails to wait for. Must be greater that 1
  # @option opts [String] :inbox_id Id of the inbox we are fetching emails from
  # @option opts [Integer] :timeout Max milliseconds to wait
  # @option opts [Boolean] :unread_only Optional filter for unread only
  # @return [Array<EmailPreview>]
  describe 'wait_for_matching_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for wait_for_nth_email
  # Wait for or fetch the email with a given index in the inbox specified
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Id of the inbox we are fetching emails from
  # @option opts [Integer] :index Zero based index of the email to wait for
  # @option opts [Integer] :timeout Max milliseconds to wait
  # @option opts [Boolean] :unread_only Optional filter for unread only
  # @return [Email]
  describe 'wait_for_nth_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
