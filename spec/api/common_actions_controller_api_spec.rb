=begin
#MailSlurp API

#MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository

The version of the OpenAPI document: 6.5.2
Contact: contact@mailslurp.dev
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for MailSlurpClient::CommonActionsControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CommonActionsControllerApi' do
  before do
    # run before each test
    @api_instance = MailSlurpClient::CommonActionsControllerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CommonActionsControllerApi' do
    it 'should create an instance of CommonActionsControllerApi' do
      expect(@api_instance).to be_instance_of(MailSlurpClient::CommonActionsControllerApi)
    end
  end

  # unit tests for create_new_email_address
  # Create new random inbox
  # Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :allow_team_access 
  # @option opts [Boolean] :use_domain_pool 
  # @option opts [DateTime] :expires_at 
  # @option opts [Integer] :expires_in 
  # @option opts [String] :email_address 
  # @option opts [String] :inbox_type 
  # @option opts [String] :description 
  # @option opts [String] :name 
  # @option opts [Array<String>] :tags 
  # @option opts [Boolean] :favourite 
  # @return [InboxDto]
  describe 'create_new_email_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_random_inbox
  # Create new random inbox
  # Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :allow_team_access 
  # @option opts [Boolean] :use_domain_pool 
  # @option opts [DateTime] :expires_at 
  # @option opts [Integer] :expires_in 
  # @option opts [String] :email_address 
  # @option opts [String] :inbox_type 
  # @option opts [String] :description 
  # @option opts [String] :name 
  # @option opts [Array<String>] :tags 
  # @option opts [Boolean] :favourite 
  # @return [InboxDto]
  describe 'create_random_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_email_address
  # Delete inbox email address by inbox id
  # Deletes inbox email address
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_email_address test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for empty_inbox
  # Delete all emails in an inbox
  # Deletes all emails
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'empty_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_email_simple
  # Send an email
  # If no senderId or inboxId provided a random email address will be used to send from.
  # @param simple_send_email_options 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'send_email_simple test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
